"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[1561],{4941:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var r=n(4848),i=n(8453);const o={sidebar_label:"User Tasks"},t="UserTaskDef and UserTaskRun",a={id:"concepts/user-tasks",title:"UserTaskDef and UserTaskRun",description:"The purpose of a Workflow Engine is to coordinate processes that assign work. A TaskRun represents a unit of work assigned to a computer, but what about work assigned to a human? That's where User Tasks come in.",source:"@site/docs/04-concepts/05-user-tasks.md",sourceDirName:"04-concepts",slug:"/concepts/user-tasks",permalink:"/docs/concepts/user-tasks",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"User Tasks"},sidebar:"tutorialSidebar",previous:{title:"External Events",permalink:"/docs/concepts/external-events"},next:{title:"Variables",permalink:"/docs/concepts/variables"}},c={},d=[{value:"Motivation",id:"motivation",level:2},{value:"<code>UserTaskDef</code>",id:"usertaskdef",level:2},{value:"<code>UserTaskRun</code>",id:"usertaskrun",level:2},{value:"<code>UserTaskRun</code> Lifecycle",id:"usertaskrun-lifecycle",level:2},{value:"<code>UserTaskRun</code> Completion",id:"usertaskrun-completion",level:2},{value:"Searching for <code>UserTaskRun</code>",id:"searching-for-usertaskrun",level:2},{value:"Lifecycle Hooks",id:"lifecycle-hooks",level:2}];function l(e){const s={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.h1,{id:"usertaskdef-and-usertaskrun",children:[(0,r.jsx)(s.code,{children:"UserTaskDef"})," and ",(0,r.jsx)(s.code,{children:"UserTaskRun"})]}),"\n",(0,r.jsxs)(s.p,{children:["The purpose of a Workflow Engine is to coordinate processes that assign work. A ",(0,r.jsx)(s.code,{children:"TaskRun"})," represents a unit of work assigned to a computer, but what about work assigned to a human? That's where User Tasks come in."]}),"\n",(0,r.jsx)(s.h2,{id:"motivation",children:"Motivation"}),"\n",(0,r.jsx)(s.p,{children:"User tasks require the input, decision-making, or expertise of an actual person. Some common examples of user tasks include:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Workflow Approvals:"})," Processes in which a specific person or group of people must review and authorize a business transaction."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"KYC:"})," Know-your-customer workflows in which a sales rep must input information about a customer (eg. billing information) before the business process can continue."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Data Input:"})," Tasks involving filling out forms or providing specific information before the business process can continue."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Manual Calculations:"})," Situations that require human intervention to perform calculations, analyses, or assessments that cannot be easily automated and wherein we can't trust Chat GPT ","\ud83d\ude09","."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["You might ask, why not just use an ",(0,r.jsx)(s.code,{children:"ExternalEvent"}),"? Technically, it is possible to implement similar functionality using just ",(0,r.jsx)(s.code,{children:"ExternalEvent"}),"s rather than introducing a whole new concept into the API. The reason for this is that so many things about User Tasks are tied deeply into the logic of the ",(0,r.jsx)(s.code,{children:"WfRun"})," itself, including assignment, reassignment, cancelling, lifecycle, and even simply scheduling a User Task."]}),"\n",(0,r.jsx)(s.p,{children:"The addition of the User Tasks feature allows LittleHorse to seamlessly automate workflows spanning humans and computers across multiple departments within an organization and beyond."}),"\n",(0,r.jsx)(s.h2,{id:"usertaskdef",children:(0,r.jsx)(s.code,{children:"UserTaskDef"})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.code,{children:"UserTaskDef"})," is a Metadata Object defining a task that can be assigned to a human."]}),"\n",(0,r.jsx)(s.admonition,{type:"info",children:(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.code,{children:"UserTaskDef"})," does not include any information about ",(0,r.jsx)(s.em,{children:"who"})," should execute the task. User Task assignment is a property of the ",(0,r.jsx)(s.code,{children:"USER_TASK"})," ",(0,r.jsx)(s.code,{children:"NODE"})," and also of the"]})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.code,{children:"UserTaskDef"})," consists of a series of fields, where each field has a name and a type. Currently, only primitieve types (",(0,r.jsx)(s.code,{children:"INT"}),", ",(0,r.jsx)(s.code,{children:"STR"}),", ",(0,r.jsx)(s.code,{children:"BOOL"}),", ",(0,r.jsx)(s.code,{children:"DOUBLE"}),") are supported for User Task fields."]}),"\n",(0,r.jsx)(s.h2,{id:"usertaskrun",children:(0,r.jsx)(s.code,{children:"UserTaskRun"})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," is an instance of a ",(0,r.jsx)(s.code,{children:"UserTaskDef"})," assigned to a human user or group of users. Just like a ",(0,r.jsx)(s.code,{children:"TaskRun"}),", the ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," is an object that can be retrieved from the LittleHorse API using ",(0,r.jsx)(s.code,{children:"lhctl"})," or the grpc clients."]}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," can be assigned to either a specific user (by an arbitrary user id) or a group of users (by an arbitrary user group id). At creation time, ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," are assigned to the user id or group id that is specified in the ",(0,r.jsx)(s.code,{children:"UserTaskNode"}),". User Tasks in LittleHorse support automatic reassignment, reminder ",(0,r.jsx)(s.code,{children:"TaskRun"}),"s, automatic cancellation after a configurable timeout, and are also searchable based on their owner."]}),"\n",(0,r.jsxs)(s.p,{children:["Like ",(0,r.jsx)(s.code,{children:"TaskRun"}),"s, the output of the ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," is used as the output of the associated ",(0,r.jsx)(s.code,{children:"NodeRun"}),". In other words, the output of a ",(0,r.jsx)(s.code,{children:"USER_TASK"})," node is a Json Variable Value with a key for each field in the ",(0,r.jsx)(s.code,{children:"UserTaskDef"}),"."]}),"\n",(0,r.jsxs)(s.h2,{id:"usertaskrun-lifecycle",children:[(0,r.jsx)(s.code,{children:"UserTaskRun"})," Lifecycle"]}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," can be in any of the following statuses:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"UNASSIGNED"}),", meaning that it isn't assigned to a specific user. If a ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," is ",(0,r.jsx)(s.code,{children:"UNASSIGNED"}),", it is guaranteed to be associated with a ",(0,r.jsx)(s.code,{children:"userGroup"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"ASSIGNED"})," means that a task is assigned to a specific ",(0,r.jsx)(s.code,{children:"userId"}),". The ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," may or may not have a ",(0,r.jsx)(s.code,{children:"userGroup"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"CANCELLED"})," denotes that the ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," has been cancelled for some reason, either manually, due to timeout, or due to other conditions in the ",(0,r.jsx)(s.code,{children:"WfRun"}),". ",(0,r.jsx)(s.code,{children:"CANCELLED"})," is currently a terminal state."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"DONE"})," Once a user execute a user task, it moves to the terminal ",(0,r.jsx)(s.code,{children:"DONE"})," state."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.h2,{id:"usertaskrun-completion",children:[(0,r.jsx)(s.code,{children:"UserTaskRun"})," Completion"]}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," only when it is assigned to a User. Then you can provide a value for each field and complete the UserTask, the resulting state will be ",(0,r.jsx)(s.code,{children:"DONE"}),". This can be done via lhctl or grpc client calls."]}),"\n",(0,r.jsxs)(s.h2,{id:"searching-for-usertaskrun",children:["Searching for ",(0,r.jsx)(s.code,{children:"UserTaskRun"})]}),"\n",(0,r.jsxs)(s.p,{children:["There are several ways to look up for an specific ",(0,r.jsx)(s.code,{children:"UserTaskRun"}),". You can use a combination of ",(0,r.jsx)(s.code,{children:"userId"}),", ",(0,r.jsx)(s.code,{children:"userGroupId"}),", ",(0,r.jsx)(s.code,{children:"userTaskStatus"})," and ",(0,r.jsx)(s.code,{children:"userTaskDefName"}),". For these searches, you will receive a list of ",(0,r.jsx)(s.code,{children:"UserTaskRunId"}),"s for ",(0,r.jsx)(s.code,{children:"UserTaskRun"}),"s that match with these criteria."]}),"\n",(0,r.jsx)(s.h2,{id:"lifecycle-hooks",children:"Lifecycle Hooks"}),"\n",(0,r.jsx)(s.p,{children:"You can trigger action when some hooks takes place. Currently LitteHorse supports:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ON_ARRIVAL"}),", triggered when Workflow execution reaches the UserTaskNode. Useful when you need to send users reminders"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ON_TASK_ASSIGNED"}),", triggered when the UserTaskRun is assigned to a user. Useful when you need schedule reasignment if the asignee does not execute this task."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>a});var r=n(6540);const i={},o=r.createContext(i);function t(e){const s=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:s},e.children)}}}]);