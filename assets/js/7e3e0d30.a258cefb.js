"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[7746],{7697:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var o=r(4848),t=r(8453);const s={},i="Three LittleHorse Orchestrators",l={id:"operations/docker-compose/three-servers",title:"Three LittleHorse Orchestrators",description:"LittleHorse is a horizontally scalable system. As such, you can configure multiple LittleHorse Orchestrator servers to act as a cluster. This provides the following benefits:",source:"@site/docs/06-operations/10-docker-compose/15-three-servers.md",sourceDirName:"06-operations/10-docker-compose",slug:"/operations/docker-compose/three-servers",permalink:"/docs/operations/docker-compose/three-servers",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:15,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Using Confluent Cloud",permalink:"/docs/operations/docker-compose/confluent-cloud"},next:{title:"LittleHorse API Reference",permalink:"/docs/api"}},c={},a=[{value:"Docker Compose File",id:"docker-compose-file",level:2},{value:"Using the Example",id:"using-the-example",level:2},{value:"Worker Configs",id:"worker-configs",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"three-littlehorse-orchestrators",children:"Three LittleHorse Orchestrators"})}),"\n",(0,o.jsx)(n.p,{children:"LittleHorse is a horizontally scalable system. As such, you can configure multiple LittleHorse Orchestrator servers to act as a cluster. This provides the following benefits:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"High availability with hot standby replicas (note that durability is handled by Kafka and does not depend on the number of LittleHorse Servers)."}),"\n",(0,o.jsx)(n.li,{children:"Higher throughput as work is distributed across multiple LittleHorse Servers."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This example shows how to run LittleHorse with three servers and a dashboard using Docker Compose without authentication."}),"\n",(0,o.jsx)(n.h2,{id:"docker-compose-file",children:"Docker Compose File"}),"\n",(0,o.jsxs)(n.p,{children:["Save the following docker-compose file and run ",(0,o.jsx)(n.code,{children:"docker compose up -d"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'services:\n  kafka:\n    container_name: lh-kafka\n    image: apache/kafka:3.8.0\n    environment:\n      ALLOW_PLAINTEXT_LISTENER: "yes"\n      KAFKA_LISTENERS: CONTROLLER://:29092,EXTERNAL://:19092,INTERNAL://:9092\n      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:19092,INTERNAL://kafka:9092\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL\n      KAFKA_BROKER_ID: "1"\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"\n      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"\n      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"\n      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:29092\n      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER\n      KAFKA_PROCESS_ROLES: broker,controller\n      KAFKA_NODE_ID: "1"\n      KAFKA_KRAFT_CLUSTER_ID: abcdefghijklmnopqrstuv\n    restart: on-failure\n    healthcheck:\n      test: kafka-topics.sh --bootstrap-server kafka:9092 --list > /dev/null 2>&1\n      interval: 5s\n  littlehorse:\n    container_name: lh-server-1\n    image: ghcr.io/littlehorse-enterprises/littlehorse/lh-server:0.10.1\n    ports:\n      - "2023:2023"\n    environment:\n      - LHS_KAFKA_BOOTSTRAP_SERVERS=kafka:9092\n      - LHS_CLUSTER_ID=my-cluster\n      - LHS_INSTANCE_ID=1\n      - LHS_SHOULD_CREATE_TOPICS=true\n      - LHS_HEALTH_SERVICE_PORT=1822\n      - LHS_INTERNAL_BIND_PORT=2011\n      - LHS_INTERNAL_ADVERTISED_HOST=lh-server-1\n      - LHS_INTERNAL_ADVERTISED_PORT=2011\n      - LHS_LISTENERS=PLAIN:2023\n      - LHS_ADVERTISED_LISTENERS=PLAIN://localhost:2023\n  littlehorse-2:\n    container_name: lh-server-2\n    image: ghcr.io/littlehorse-enterprises/littlehorse/lh-server:0.10.1\n    ports:\n      - "2024:2024"\n    environment:\n      - LHS_KAFKA_BOOTSTRAP_SERVERS=kafka:9092\n      - LHS_CLUSTER_ID=my-cluster\n      - LHS_INSTANCE_ID=2\n      - LHS_SHOULD_CREATE_TOPICS=true\n      - LHS_HEALTH_SERVICE_PORT=1822\n      - LHS_INTERNAL_BIND_PORT=2021\n      - LHS_INTERNAL_ADVERTISED_HOST=lh-server-2\n      - LHS_INTERNAL_ADVERTISED_PORT=2021\n      - LHS_LISTENERS=PLAIN:2024\n      - LHS_ADVERTISED_LISTENERS=PLAIN://localhost:2024\n  littlehorse-3:\n    container_name: lh-server-3\n    image: ghcr.io/littlehorse-enterprises/littlehorse/lh-server:0.10.1\n    ports:\n      - "2025:2025"\n    environment:\n      - LHS_KAFKA_BOOTSTRAP_SERVERS=kafka:9092\n      - LHS_CLUSTER_ID=my-cluster\n      - LHS_INSTANCE_ID=3\n      - LHS_SHOULD_CREATE_TOPICS=true\n      - LHS_HEALTH_SERVICE_PORT=1822\n      - LHS_INTERNAL_BIND_PORT=2031\n      - LHS_INTERNAL_ADVERTISED_HOST=lh-server-3\n      - LHS_INTERNAL_ADVERTISED_PORT=2031\n      - LHS_LISTENERS=PLAIN:2025\n      - LHS_ADVERTISED_LISTENERS=PLAIN://localhost:2025\n  dashboard:\n    container_name: lh-dashboard\n    image: ghcr.io/littlehorse-enterprises/littlehorse/lh-dashboard:master\n    environment:\n      LHC_API_HOST: lh-server-1\n      LHC_API_PORT: 2023\n      LHD_OAUTH_ENABLED: false\n    restart: on-failure\n    healthcheck:\n      test: curl -f localhost:3000\n      interval: 5s\n    ports:\n      - "8080:3000"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"using-the-example",children:"Using the Example"}),"\n",(0,o.jsxs)(n.p,{children:["Once you have created the LH Cluster using Docker Compose, the next step is to access it. For example, you can use one of our ",(0,o.jsx)(n.a,{href:"/docs/developer-guide/install#get-started",children:"quickstarts"})," with the following configurations."]}),"\n",(0,o.jsxs)(n.p,{children:["The dashboard can be accessed at ",(0,o.jsx)(n.a,{href:"http://localhost:8080",children:(0,o.jsx)(n.code,{children:"http://localhost:8080"})}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["You can connect to any of the three LittleHorse server instances in the cluster. In this example, the dashboard is configured to communicate with the server on port ",(0,o.jsx)(n.code,{children:"2023"}),", but you could also connect with the servers on ports ",(0,o.jsx)(n.code,{children:"2024"})," or ",(0,o.jsx)(n.code,{children:"2025"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"worker-configs",children:"Worker Configs"}),"\n",(0,o.jsxs)(n.p,{children:["Workers are configured when you create an ",(0,o.jsx)(n.code,{children:"LHConfig"})," object according to ",(0,o.jsx)(n.a,{href:"/docs/developer-guide/client-configuration#creating-the-lhconfig",children:"our documentation"}),". You need to pass in certain properties (either directly to the ",(0,o.jsx)(n.code,{children:"LHConfig"})," constructor, through a ",(0,o.jsx)(n.code,{children:"Properties"})," file, or through environment variables)."]}),"\n",(0,o.jsx)(n.p,{children:"For this example, your workers should be configured as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"LHC_API_HOST=localhost\n\n// You can address any of the three LittleHorse server ports\nLHC_API_PORT=2023\n\nLHW_SERVER_CONNECT_LISTENER=PLAIN\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Even though your worker config only specifies one port to connect to via ",(0,o.jsx)(n.code,{children:"LHC_API_PORT"}),", your workers will actually communicate with the entire cluster. This is because the Task Worker uses a discovery protocol in which it asks the bootstrap host (specified by ",(0,o.jsx)(n.code,{children:"LHC_API_HOST"})," and ",(0,o.jsx)(n.code,{children:"LHC_API_PORT"}),") for which servers to connect to in order to execute tasks."]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["In production, it's recommended for your ",(0,o.jsx)(n.code,{children:"LHC_API_HOST"})," and ",(0,o.jsx)(n.code,{children:"LHC_API_PORT"})," to point to a load balancer that balances requests across all instances."]})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["If you walk through our ",(0,o.jsx)(n.a,{href:"/docs/developer-guide/install#get-started",children:"quickstarts"}),", the code in all three assumes that your configuration is set as environment variables."]})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var o=r(6540);const t={},s=o.createContext(t);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);