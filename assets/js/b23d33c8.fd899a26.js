"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[1561],{4941:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var r=n(4848),i=n(8453);const o={},t="User Tasks",a={id:"concepts/user-tasks",title:"User Tasks",description:"The purpose of a Workflow Engine is to coordinate processes that assign work. A TaskRun represents a unit of work assigned to a computer, but what about work assigned to a human? That's where User Tasks come in.",source:"@site/docs/04-concepts/05-user-tasks.md",sourceDirName:"04-concepts",slug:"/concepts/user-tasks",permalink:"/docs/concepts/user-tasks",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"External Events and Interrupts",permalink:"/docs/concepts/external-events"},next:{title:"Authz, Principals, and Tenants",permalink:"/docs/concepts/principals-and-tenants"}},c={},d=[{value:"Motivation",id:"motivation",level:2},{value:"Schemas of User Tasks",id:"schemas-of-user-tasks",level:2},{value:"Using User Task Output",id:"using-user-task-output",level:3},{value:"Users and Groups",id:"users-and-groups",level:2},{value:"User Task Lifecycle",id:"user-task-lifecycle",level:2},{value:"Users and Groups",id:"users-and-groups-1",level:3},{value:"<code>UserTaskRun</code> Statuses",id:"usertaskrun-statuses",level:3},{value:"Lifecycle Hooks",id:"lifecycle-hooks",level:2}];function l(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{id:"user-tasks",children:"User Tasks"}),"\n",(0,r.jsxs)(s.p,{children:["The purpose of a Workflow Engine is to coordinate processes that assign work. A ",(0,r.jsx)(s.code,{children:"TaskRun"})," represents a unit of work assigned to a computer, but what about work assigned to a human? That's where User Tasks come in."]}),"\n",(0,r.jsx)(s.admonition,{type:"tip",children:(0,r.jsxs)(s.p,{children:["This page covers the concept of User Tasks. For a more practical take, see our ",(0,r.jsxs)(s.a,{href:"/docs/developer-guide/wfspec-development/user-tasks",children:[(0,r.jsx)(s.code,{children:"WfSpec"})," Development Docs"]})," or our ",(0,r.jsx)(s.a,{href:"/docs/developer-guide/grpc/user-tasks",children:"grpc docs"}),"."]})}),"\n",(0,r.jsx)(s.h2,{id:"motivation",children:"Motivation"}),"\n",(0,r.jsxs)(s.p,{children:["You might ask, why not just use an ",(0,r.jsx)(s.code,{children:"ExternalEvent"}),"? Technically, it is possible to implement similar functionality using just ",(0,r.jsx)(s.code,{children:"ExternalEvent"}),"s rather than introducing a whole new concept into the API. The reason for this is that so many things about User Tasks are tied deeply into the logic of the ",(0,r.jsx)(s.code,{children:"WfRun"})," itself, including assignment, reassignment, cancelling, lifecycle, and even simply scheduling a User Task."]}),"\n",(0,r.jsxs)(s.p,{children:["For example, the Dashboard allows you to see a history of when a ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," was assigned, and to whom it was assigned:"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"User Task Assignment History",src:n(4441).A+"",width:"817",height:"567"})}),"\n",(0,r.jsx)(s.p,{children:"In short, User tasks handle workflow use-cases which require the input, decision-making, or expertise of an actual person. Some common examples of user tasks include:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Workflow Approvals:"})," Processes in which a specific person or group of people must review and authorize a business transaction."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"KYC:"})," Know-your-customer workflows in which a sales rep must input information about a customer (eg. billing information) before the business process can continue."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Data Input:"})," Tasks involving filling out forms or providing specific information before the business process can continue."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Manual Calculations:"})," Situations that require human intervention to perform calculations, analyses, or assessments that cannot be easily automated and wherein we can't trust Chat GPT ","\ud83d\ude09","."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"The addition of the User Tasks feature allows LittleHorse to seamlessly automate workflows spanning humans and computers across multiple departments within an organization and beyond."}),"\n",(0,r.jsx)(s.h2,{id:"schemas-of-user-tasks",children:"Schemas of User Tasks"}),"\n",(0,r.jsx)(s.p,{children:"In the LittleHorse API, User Tasks are represented and controlled by three objects:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["The ",(0,r.jsx)(s.a,{href:"/docs/api#usertaskdef",children:(0,r.jsx)(s.code,{children:"UserTaskDef"})})," object defines the schema of..."]}),"\n",(0,r.jsxs)(s.li,{children:["The ",(0,r.jsx)(s.a,{href:"/docs/api#usertaskrun",children:(0,r.jsx)(s.code,{children:"UserTaskRun"})})," object, which is created when a ",(0,r.jsx)(s.code,{children:"ThreadRun"})," arrives at a..."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/docs/api#usertasknode",children:(0,r.jsx)(s.code,{children:"UserTaskNode"})})," object, which is a type of ",(0,r.jsx)(s.code,{children:"Node"})," in a ",(0,r.jsx)(s.code,{children:"WfSpec"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["When a person executes a User Task, he or she must fill out one or more pieces of information in a ",(0,r.jsx)(s.em,{children:"form"})," somewhere (most often, this will be on a UI). The fields in these forms are defined by the ",(0,r.jsx)(s.code,{children:"fields"})," of a ",(0,r.jsx)(s.code,{children:"UserTaskDef"}),"."]}),"\n",(0,r.jsx)(s.h3,{id:"using-user-task-output",children:"Using User Task Output"}),"\n",(0,r.jsxs)(s.p,{children:["As discussed in the ",(0,r.jsx)(s.a,{href:"/docs/concepts/workflows",children:"Workflow Concept docs"}),", every step (i.e. ",(0,r.jsx)(s.code,{children:"Node"}),") in a workflow returns some output, which can be used to modify a workflow ",(0,r.jsx)(s.code,{children:"Variable"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["The returned output has the variable type ",(0,r.jsx)(s.code,{children:"JSON_OBJ"}),", and individual fields can be accessed for variable mutations using the appropriate ",(0,r.jsx)(s.code,{children:".jsonPath()"})," methods in our SDK's."]}),"\n",(0,r.jsx)(s.admonition,{type:"info",children:(0,r.jsxs)(s.p,{children:["For detailed tutorials on ",(0,r.jsx)(s.em,{children:"how"})," to use User Tasks, check our ",(0,r.jsxs)(s.a,{href:"/docs/developer-guide/wfspec-development/user-tasks",children:[(0,r.jsx)(s.code,{children:"WfSpec"})," Development Guide"]})," and our ",(0,r.jsx)(s.a,{href:"/docs/developer-guide/grpc/user-tasks",children:"grpc guide"}),"."]})}),"\n",(0,r.jsx)(s.h2,{id:"users-and-groups",children:"Users and Groups"}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," may be assigned to either a ",(0,r.jsx)(s.code,{children:"user_id"})," or a ",(0,r.jsx)(s.code,{children:"user_group"}),". Both ",(0,r.jsx)(s.code,{children:"user_id"})," and ",(0,r.jsx)(s.code,{children:"user_group"})," are just plain Strings in LittleHorse, and are not validated with any external third-party identity provider (however, ",(0,r.jsx)(s.a,{href:"https://littlehorse.io",children:"LittleHorse Enterprises LLC"})," has a commercial product which connects User Tasks to an Identity Provider using the OIDC protocol)."]}),"\n",(0,r.jsx)(s.h2,{id:"user-task-lifecycle",children:"User Task Lifecycle"}),"\n",(0,r.jsxs)(s.p,{children:["An instance of a User Task (a ",(0,r.jsx)(s.code,{children:"UserTaskRun"}),") is created according to a ",(0,r.jsx)(s.code,{children:"UserTaskDef"})," specification when a ",(0,r.jsx)(s.code,{children:"ThreadRun"})," arrives at a ",(0,r.jsx)(s.code,{children:"UserTaskNode"}),'. In plain English, when a Workflow Run gets to a "user task" step, we create a ',(0,r.jsx)(s.code,{children:"UserTaskRun"})," and assign it to either a ",(0,r.jsx)(s.code,{children:"user_id"}),", ",(0,r.jsx)(s.code,{children:"user_group"}),", or both."]}),"\n",(0,r.jsx)(s.h3,{id:"users-and-groups-1",children:"Users and Groups"}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," may be assigned to either a ",(0,r.jsx)(s.code,{children:"user_id"})," or a ",(0,r.jsx)(s.code,{children:"user_group"}),". Both ",(0,r.jsx)(s.code,{children:"user_id"})," and ",(0,r.jsx)(s.code,{children:"user_group"})," are just plain Strings in LittleHorse, and are not validated with any external third-party identity provider (however, ",(0,r.jsx)(s.a,{href:"https://littlehorse.io",children:"LittleHorse Enterprises LLC"})," has a commercial product which connects User Tasks to an Identity Provider using the OIDC protocol)."]}),"\n",(0,r.jsxs)(s.p,{children:["At creation time, ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," are assigned to the user id or group id that is specified in the ",(0,r.jsx)(s.code,{children:"UserTaskNode"}),". User Tasks in LittleHorse support automatic reassignment, reminder ",(0,r.jsx)(s.code,{children:"TaskRun"}),"s, automatic cancellation after a configurable timeout, and are also searchable based on their owner."]}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," is an instance of a ",(0,r.jsx)(s.code,{children:"UserTaskDef"})," assigned to a human user or group of users. Just like a ",(0,r.jsx)(s.code,{children:"TaskRun"}),", the ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," is an object that can be retrieved from the LittleHorse API using ",(0,r.jsx)(s.code,{children:"lhctl"})," or the grpc clients."]}),"\n",(0,r.jsxs)(s.p,{children:["Like ",(0,r.jsx)(s.code,{children:"TaskRun"}),"s, the output of the ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," is used as the output of the associated ",(0,r.jsx)(s.code,{children:"NodeRun"}),". In other words, the output of a ",(0,r.jsx)(s.code,{children:"USER_TASK"})," node is a Json Variable Value with a key for each field in the ",(0,r.jsx)(s.code,{children:"UserTaskDef"}),"."]}),"\n",(0,r.jsxs)(s.h3,{id:"usertaskrun-statuses",children:[(0,r.jsx)(s.code,{children:"UserTaskRun"})," Statuses"]}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," can be in any of the following statuses:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"UNASSIGNED"}),", meaning that it isn't assigned to a specific user. If a ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," is ",(0,r.jsx)(s.code,{children:"UNASSIGNED"}),", it is guaranteed to be associated with a ",(0,r.jsx)(s.code,{children:"user_group"}),", and the ",(0,r.jsx)(s.code,{children:"user_id"})," field will be un-set."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"ASSIGNED"})," means that a task is assigned to a specific ",(0,r.jsx)(s.code,{children:"user_id"}),". The ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," may or may not have a ",(0,r.jsx)(s.code,{children:"user_group"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"CANCELLED"})," denotes that the ",(0,r.jsx)(s.code,{children:"UserTaskRun"})," has been cancelled for some reason, either manually, due to timeout, or due to other conditions in the ",(0,r.jsx)(s.code,{children:"WfRun"}),". ",(0,r.jsx)(s.code,{children:"CANCELLED"})," is currently a terminal state."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"DONE"})," Once a user execute a user task, it moves to the terminal ",(0,r.jsx)(s.code,{children:"DONE"})," state."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"lifecycle-hooks",children:"Lifecycle Hooks"}),"\n",(0,r.jsx)(s.p,{children:"Another useful feature of LittleHorse User Tasks are hooks which allow you to automate certain lifecycle behaviors of User Tasks when certain time periods expire."}),"\n",(0,r.jsx)(s.p,{children:"Use-cases include:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Re-assigning a User Task to a different user after a certain period of time expires."}),"\n",(0,r.jsx)(s.li,{children:"Sending reminders to users or groups of users after a certain time period."}),"\n",(0,r.jsx)(s.li,{children:"Releasing ownership of a User Task from a specific user to a group of users after a period of inactivity."}),"\n"]}),"\n",(0,r.jsx)(s.admonition,{type:"note",children:(0,r.jsxs)(s.p,{children:["Check our ",(0,r.jsxs)(s.a,{href:"/docs/developer-guide/wfspec-development/user-tasks#automatic-reassignment",children:[(0,r.jsx)(s.code,{children:"WfSpec"})," Development Docs"]})," to see how this works."]})})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},4441:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/user-task-history-cce08849f0853901f3cff67d49dca1d2.png"},8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>a});var r=n(6540);const i={},o=r.createContext(i);function t(e){const s=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:s},e.children)}}}]);