"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[1946],{9353:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var n=o(4848),s=o(8453);const r={},c="Concepts",i={id:"concepts/concepts",title:"Concepts",description:"A WfSpec in LittleHorse is a Protobuf that defines your technical or business process (it can also be representated in JSON). While the LittleHorse Server only understands the protobuf format of the WfSpec, the well-defined nature of the data format allowed LittleHorse to create SDK's in Java and GoLang that let you create WfSpecs from natural code. Since most of the LittleHorse concepts map nicely to programming concepts, this is a very natural and easy way to define your WfSpecs.",source:"@site/docs/04-concepts/04-concepts.md",sourceDirName:"04-concepts",slug:"/concepts/",permalink:"/docs/concepts/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Architecture and Guarantees",permalink:"/docs/architecture-and-guarantees"},next:{title:"Workflows",permalink:"/docs/concepts/workflows"}},a={},l=[];function d(e){const t={a:"a",code:"code",h1:"h1",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"concepts",children:"Concepts"}),"\n",(0,n.jsxs)(t.p,{children:["A ",(0,n.jsx)(t.code,{children:"WfSpec"})," in LittleHorse is a Protobuf that defines your technical or business process (it can also be representated in JSON). While the LittleHorse Server only understands the protobuf format of the ",(0,n.jsx)(t.code,{children:"WfSpec"}),", the well-defined nature of the data format allowed LittleHorse to create SDK's in Java and GoLang that let you create ",(0,n.jsx)(t.code,{children:"WfSpec"}),"s from natural code. Since most of the LittleHorse concepts map nicely to programming concepts, this is a very natural and easy way to define your ",(0,n.jsx)(t.code,{children:"WfSpec"}),"s."]}),"\n",(0,n.jsxs)(t.p,{children:["The Developer Guide discusses in detail how to develop ",(0,n.jsx)(t.code,{children:"WfSpec"}),"s with your SDK of choice."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsxs)(t.strong,{children:["This section discusses how the ",(0,n.jsx)(t.code,{children:"WfSpecs"})," and ",(0,n.jsx)(t.code,{children:"WfRun"}),"s created by those SDKs behave."]})}),"\n",(0,n.jsxs)(t.p,{children:["NOTE: If you really want to, you can develop workflows using raw JSON. Tutorials for how to do that are incoming. For now, we refer you to the ",(0,n.jsx)(t.a,{href:"https://github.com/littlehorse-enterprises/lh-proto/src/master/",children:"protocol buffer definition"}),"."]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>c,x:()=>i});var n=o(6540);const s={},r=n.createContext(s);function c(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);