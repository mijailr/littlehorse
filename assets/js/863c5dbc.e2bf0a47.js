"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[3453],{2506:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>o,toc:()=>t});var i=s(4848),r=s(8453);const c={sidebar_label:"Exception Handling"},l="Exception Handling",o={id:"concepts/exception-handling",title:"Exception Handling",description:"When things go wrong, LittleHorse has got you covered. That's where Failure Handling comes into play.",source:"@site/docs/04-concepts/10-exception-handling.md",sourceDirName:"04-concepts",slug:"/concepts/exception-handling",permalink:"/docs/concepts/exception-handling",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_label:"Exception Handling"},sidebar:"tutorialSidebar",previous:{title:"Conditional Branching",permalink:"/docs/concepts/conditionals"},next:{title:"Interrupts",permalink:"/docs/concepts/interrupts"}},d={},t=[{value:"What Are Failures?",id:"what-are-failures",level:2},{value:"Business <code>EXCEPTION</code>s",id:"business-exceptions",level:3},{value:"Technical <code>ERROR</code>s",id:"technical-errors",level:3},{value:"Failure Names",id:"failure-names",level:3},{value:"Failure Content",id:"failure-content",level:3},{value:"Handling Failures",id:"handling-failures",level:2},{value:"Throwing <code>EXCEPTION</code>s",id:"throwing-exceptions",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"exception-handling",children:"Exception Handling"}),"\n",(0,i.jsx)(n.p,{children:"When things go wrong, LittleHorse has got you covered. That's where Failure Handling comes into play."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsxs)(n.a,{href:"/blog/littlehorse-0.5.0-release",children:[(0,i.jsx)(n.code,{children:"0.5.0"})," release"]})," introduced a new value for the ",(0,i.jsx)(n.code,{children:"LHStatus"})," enum (used in ",(0,i.jsx)(n.code,{children:"WfRun"}),", ",(0,i.jsx)(n.code,{children:"ThreadRun"}),", and ",(0,i.jsx)(n.code,{children:"NodeRun"}),"): ",(0,i.jsx)(n.code,{children:"LHStatus.EXCEPTION"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"what-are-failures",children:"What Are Failures?"}),"\n",(0,i.jsx)(n.p,{children:"A Failure in LittleHorse is like an Exception in programming. It means that A Bad Thing\xae has happened. However, we should note that LittleHorse is at its core a Workflow Engine. Therefore, there are two potential sources of Failure:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"A technical process, such as an external API call, fails."}),"\n",(0,i.jsx)(n.li,{children:"Something goes wrong at the business process level; for example, a credit card has insufficient funds."}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Exception Handling in LittleHorse is a fully separate concept from ",(0,i.jsxs)(n.a,{href:"https://littlehorse.dev/docs/concepts/tasks#retries-and-taskattempt",children:[(0,i.jsx)(n.code,{children:"TaskRun"})," retries"]}),"."]})}),"\n",(0,i.jsxs)(n.h3,{id:"business-exceptions",children:["Business ",(0,i.jsx)(n.code,{children:"EXCEPTION"}),"s"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.a,{href:"/blog/littlehorse-0.5.0-release",children:["Release ",(0,i.jsx)(n.code,{children:"0.3.0"})]})," introduced the ",(0,i.jsx)(n.code,{children:"EXCEPTION"})," status to LittleHorse (it was made stable in ",(0,i.jsx)(n.code,{children:"0.5.0"}),"). This was because initial feedback from users was that when a ",(0,i.jsx)(n.code,{children:"WfRun"}),", ",(0,i.jsx)(n.code,{children:"ThreadRun"}),", or ",(0,i.jsx)(n.code,{children:"NodeRun"})," is in the ",(0,i.jsx)(n.code,{children:"ERROR"})," status, it is difficult to know whether the failure was caused by a technical outage or by business logic. Often, we want to handle such cases differently."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"EXCEPTION"})," status fills this gap by offering a status to represent a specific business process failure. The user provides the name of the ",(0,i.jsx)(n.code,{children:"EXCEPTION"})," and must explicitly throw such an exception by calling ",(0,i.jsx)(n.code,{children:"WorkflowThread#fail()"})," in any ",(0,i.jsx)(n.code,{children:"WfSpec"})," SDK."]}),"\n",(0,i.jsxs)(n.p,{children:["This is similar to ",(0,i.jsx)(n.code,{children:"throw new FooException()"})," in java."]}),"\n",(0,i.jsxs)(n.h3,{id:"technical-errors",children:["Technical ",(0,i.jsx)(n.code,{children:"ERROR"}),"s"]}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.code,{children:"ERROR"})," in LittleHorse means that some technical process has failed. Causes of an ",(0,i.jsx)(n.code,{children:"ERROR"})," include:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.code,{children:"TaskRun"})," timeout."]}),"\n",(0,i.jsxs)(n.li,{children:["An unexpected exception thrown by the Task Worker when processing a ",(0,i.jsx)(n.code,{children:"TaskRun"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Casting errors when attempting to serialize inputs for a ",(0,i.jsx)(n.code,{children:"TaskRun"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Casting errors when processing the outputs of a ",(0,i.jsx)(n.code,{children:"NodeRun"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"WfSpec"})," SDK does not surface the ability to throw an ",(0,i.jsx)(n.code,{children:"ERROR"}),"; however, the SDK does allow users to catch and handle ",(0,i.jsx)(n.code,{children:"ERROR"}),"s in the same manner as ",(0,i.jsx)(n.code,{children:"EXCEPTION"}),"s."]}),"\n",(0,i.jsx)(n.h3,{id:"failure-names",children:"Failure Names"}),"\n",(0,i.jsxs)(n.p,{children:["Every Failure (either ",(0,i.jsx)(n.code,{children:"EXCEPTION"})," or ",(0,i.jsx)(n.code,{children:"ERROR"}),") has a name. This is useful for two reasons:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"It allows users to define different handlers for specific Failure types."}),"\n",(0,i.jsxs)(n.li,{children:["It provides better visibility into just what went wrong in a ",(0,i.jsx)(n.code,{children:"WfRun"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["All ",(0,i.jsx)(n.code,{children:"ERROR"})," names are in ",(0,i.jsx)(n.code,{children:"UPPER_UNDERSCORE_CASE"}),", and they are pre-defined by LittleHorse. They are as follows:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"CHILD_FAILURE"}),": A Child ",(0,i.jsx)(n.code,{children:"ThreadRun"})," failed with an uncaught ",(0,i.jsx)(n.code,{children:"ERROR"})," (not ",(0,i.jsx)(n.code,{children:"EXCEPTION"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"VAR_SUB_ERROR"}),": Failed to assign an input variable (whether to a ",(0,i.jsx)(n.code,{children:"NodeRun"})," of some sort or a child ",(0,i.jsx)(n.code,{children:"ThreadRun"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"VAR_MUTATION_ERROR"}),": Failed mutating the value of a variable."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"USER_TASK_CANCELLED"}),": A ",(0,i.jsx)(n.code,{children:"UserTaskRun"})," was cancelled."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"TIMEOUT"}),": Some timeout occurred. Usually, this is thrown by a ",(0,i.jsx)(n.code,{children:"TaskRun"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"TASK_FAILURE"}),": Some uncaught exception was thrown by the Task Worker while executing a ",(0,i.jsx)(n.code,{children:"TaskRun"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"INTERNAL_ERROR"}),": An unknown problem occurred. This is exceedingly rare."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"VAR_ERROR"}),": This is a super-type of ",(0,i.jsx)(n.code,{children:"VAR_SUB_ERROR"})," and ",(0,i.jsx)(n.code,{children:"VAR_MUTATION_ERROR"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"TASK_ERROR"}),": This is a super-type of ",(0,i.jsx)(n.code,{children:"TIMEOUT"})," and ",(0,i.jsx)(n.code,{children:"TASK_FAILURE"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In contrast, all ",(0,i.jsx)(n.code,{children:"EXCEPTION"})," names are in ",(0,i.jsx)(n.code,{children:"dns-subdomain-format"}),", and they are specified by you, the user!"]}),"\n",(0,i.jsx)(n.p,{children:"Failure names are important both when handling and throwing Failures, so stay tuned."}),"\n",(0,i.jsx)(n.h3,{id:"failure-content",children:"Failure Content"}),"\n",(0,i.jsxs)(n.p,{children:["In programming, exceptions often have some content or values to them. For example, the grpc ",(0,i.jsx)(n.code,{children:"StatusRuntimeException"})," in Java contains a ",(0,i.jsx)(n.code,{children:"Code"})," and a ",(0,i.jsx)(n.code,{children:"String description"}),". Likewise, a Failure in LittleHorse has content in the form of a single ",(0,i.jsx)(n.code,{children:"VariableValue"}),", which is of type ",(0,i.jsx)(n.code,{children:"NULL"})," if there is no content. Any Failure Handler can access the content of the failure using the special reserved ",(0,i.jsx)(n.code,{children:"INPUT"})," variable."]}),"\n",(0,i.jsx)(n.h2,{id:"handling-failures",children:"Handling Failures"}),"\n",(0,i.jsxs)(n.p,{children:["How can you recover when things go wrong? That's where Failure Handler's come into play. In programming, you can define a block of code (exception handler) that runs to handle a certain exception. In LittleHorse, you specify a ",(0,i.jsx)(n.code,{children:"ThreadSpec"})," that runs when a Failure of a certain type occurs."]}),"\n",(0,i.jsxs)(n.p,{children:["There are three methods on the ",(0,i.jsx)(n.code,{children:"WorkflowThread"})," which allow this to happen:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WorkflowThread#handleException()"})," is used to handle business failures (",(0,i.jsx)(n.code,{children:"EXCEPTION"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WorkflowThread#handleError()"})," is used to handle technical failures (",(0,i.jsx)(n.code,{children:"ERROR"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WorkflowThread#handleAnyFailure()"})," registers a handler for any Failure, whether it's an ",(0,i.jsx)(n.code,{children:"EXCEPTION"})," or ",(0,i.jsx)(n.code,{children:"ERROR"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For ",(0,i.jsx)(n.code,{children:"handleException"})," and ",(0,i.jsx)(n.code,{children:"handleError"}),", you can optionally pass in a specific ",(0,i.jsx)(n.code,{children:"name"})," of the Exception or Error that you wish to handle."]}),"\n",(0,i.jsxs)(n.h2,{id:"throwing-exceptions",children:["Throwing ",(0,i.jsx)(n.code,{children:"EXCEPTION"}),"s"]}),"\n",(0,i.jsxs)(n.p,{children:["You can throw an exception using the ",(0,i.jsx)(n.code,{children:"WorkflowThread#fail()"})," method."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(6540);const r={},c=i.createContext(r);function l(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);