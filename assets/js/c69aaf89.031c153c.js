"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[3361],{9686:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>d,toc:()=>u});var t=s(4848),r=s(8453),i=s(1470),o=s(9365);const a={},l="Handling User Tasks",d={id:"developer-guide/grpc/user-tasks",title:"Handling User Tasks",description:"User Tasks enable a ThreadRun to block until a human user provides some input into the workflow. Additionally, User Tasks have several useful hooks such as automatic reassignment, reminders, and auditing capabilities.",source:"@site/docs/05-developer-guide/09-grpc/20-user-tasks.md",sourceDirName:"05-developer-guide/09-grpc",slug:"/developer-guide/grpc/user-tasks",permalink:"/docs/developer-guide/grpc/user-tasks",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Posting ExternalEvents",permalink:"/docs/developer-guide/grpc/posting-external-events"},next:{title:"Operations",permalink:"/docs/operations/"}},c={},u=[{value:"<code>UserTaskRun</code> Lifecycle",id:"usertaskrun-lifecycle",level:2},{value:"Search for <code>UserTaskRun</code>s",id:"search-for-usertaskruns",level:2},{value:"Display a <code>UserTaskRun</code>",id:"display-a-usertaskrun",level:2},{value:"Complete a <code>UserTaskRun</code>",id:"complete-a-usertaskrun",level:2},{value:"Save a <code>UserTaskRun</code>",id:"save-a-usertaskrun",level:2},{value:"Re-Assign a <code>UserTaskRun</code>",id:"re-assign-a-usertaskrun",level:2},{value:"Cancel a <code>UserTaskRun</code>",id:"cancel-a-usertaskrun",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"handling-user-tasks",children:"Handling User Tasks"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/docs/concepts/user-tasks",children:"User Tasks"})," enable a ",(0,t.jsx)(n.code,{children:"ThreadRun"})," to block until a human user provides some input into the workflow. Additionally, User Tasks have several useful hooks such as automatic reassignment, reminders, and auditing capabilities."]}),"\n",(0,t.jsxs)(n.p,{children:["This page shows you how to interact with a ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," on an already-running ",(0,t.jsx)(n.code,{children:"WfRun"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["For documentation about how to insert a ",(0,t.jsx)(n.code,{children:"USER_TASK"})," node into your ",(0,t.jsx)(n.code,{children:"WfSpec"}),", please refer to the ",(0,t.jsxs)(n.a,{href:"/docs/developer-guide/wfspec-development/user-tasks",children:[(0,t.jsx)(n.code,{children:"WfSpec"})," development documentation"]}),"."]})}),"\n",(0,t.jsx)(n.p,{children:"Note that LittleHorse does not provide an out-of-the-box implementation of a User Task Manager application. This is because it would likely be of limited use to our users, because the implementation of User Task Applications is highly use-case specific. For example, each of the following considerations might be handled vastly differently depending on the application:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Presentation:"})," is the user task form presented in a mobile app, standalone internal web application, or embedded into a customer-facing site?"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Identity Management:"})," what system is used to manage and determine the identity of the person executing User Tasks?"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Look and Feel:"})," what is the style of the actual page?"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Access Permisions:"})," while the ",(0,t.jsx)(n.code,{children:"userGroup"})," field of a ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," is useful for determining who may execute a ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),", how should the Task Manager application determine who can perform additional acctions, such as reassignment and viewing audit information?"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"While those considerations are left to the user of LittleHorse, User Tasks still provide an incredibly valuable tool to our users, specifically:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Direct integrations with the ",(0,t.jsx)(n.code,{children:"WfSpec"})]}),"\n",(0,t.jsx)(n.li,{children:"Built-in reassignment and reminder capabilities"}),"\n",(0,t.jsx)(n.li,{children:"Built-in search capabilities."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This documentation explains everything you need in order to build your own application-specific User Tasks integration."}),"\n",(0,t.jsxs)(n.h2,{id:"usertaskrun-lifecycle",children:[(0,t.jsx)(n.code,{children:"UserTaskRun"})," Lifecycle"]}),"\n",(0,t.jsxs)(n.p,{children:["In order to use User Tasks, you must first create a ",(0,t.jsx)(n.code,{children:"WfSpec"})," that has a ",(0,t.jsx)(n.code,{children:"USER_TASK"})," node in it, for example by using the ",(0,t.jsx)(n.code,{children:"WorkflowThread#assignUserTask()"})," method (see our ",(0,t.jsxs)(n.a,{href:"/docs/developer-guide/wfspec-development/user-tasks",children:[(0,t.jsx)(n.code,{children:"WfSpec"})," Development Docs"]}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["When a ",(0,t.jsx)(n.code,{children:"ThreadRun"})," arrives at such a ",(0,t.jsx)(n.code,{children:"Node"}),", then a ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," object is created in the LittleHorse Data Store. The ",(0,t.jsx)(n.code,{children:"ThreadRun"}),' will "block" at that ',(0,t.jsx)(n.code,{children:"Node"})," until the ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," is either completed or cancelled. When the ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," is completed, the ",(0,t.jsx)(n.code,{children:"NodeRun"})," returns an output which is a ",(0,t.jsx)(n.code,{children:"JSON_OBJ"})," containing a key-value pair for every field in the ",(0,t.jsx)(n.code,{children:"UserTaskDef"})," (in plain English, this is just one key-value for each field in the User Task form). When the ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," is cancelled, an ",(0,t.jsx)(n.code,{children:"EXCEPTION"})," is propagated to the ",(0,t.jsx)(n.code,{children:"ThreadRun"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The only way to Complete a ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," is via the ",(0,t.jsx)(n.code,{children:"rpc CompleteUserTaskRun"})," endpoint on the LH Server. A ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," may be cancelled either by the ",(0,t.jsx)(n.code,{children:"rpc CancelUserTaskRun"})," or by lifecycle hooks built-in to the ",(0,t.jsx)(n.code,{children:"WfSpec"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," may be in one of the four statuses below:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"UNASSIGNED"}),": the ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," does not have a specific ",(0,t.jsx)(n.code,{children:"user_id"})," set. In this case, ",(0,t.jsx)(n.code,{children:"user_group"})," must be set."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ASSIGNED"}),": the ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," has a specific ",(0,t.jsx)(n.code,{children:"user_id"})," set, and may have a ",(0,t.jsx)(n.code,{children:"user_group"})," set as well."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"DONE"}),": the ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," has been completed."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CANCELLED"}),": the ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," has been cancelled either by a manual ",(0,t.jsx)(n.code,{children:"rpc CancelUserTaskRun"})," or by a built-in User Task lifecycle hook."]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"search-for-usertaskruns",children:["Search for ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),"s"]}),"\n",(0,t.jsxs)(n.p,{children:["Before you can do anything useful with User Tasks, you need to be able to search for a list of ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),"'s matching certain criteria. The endpoint ",(0,t.jsx)(n.code,{children:"rpc SearchUserTaskRun"})," allows you to do this."]}),"\n",(0,t.jsxs)(n.p,{children:["You can find the documentation for ",(0,t.jsx)(n.code,{children:"rpc SearchUserTaskRun"})," ",(0,t.jsx)(n.a,{href:"/docs/api#searchusertaskrun",children:"here in our API documentation"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"There are six filters that can be provided:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"status"}),": an enum of either ",(0,t.jsx)(n.code,{children:"DONE"}),", ",(0,t.jsx)(n.code,{children:"UNASSIGNED"}),", ",(0,t.jsx)(n.code,{children:"ASSIGNED"}),", or ",(0,t.jsx)(n.code,{children:"CANCELLED"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"user_task_def_name"}),": the name of the associated ",(0,t.jsx)(n.code,{children:"UserTaskDef"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"user_id"}),": Only returns ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),"'s assigned to a specific user."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"user_group"}),": only returns ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),"'s assigned to a group."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"earliest_start"}),": only returns ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),"'s created after this date."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"latest_start"}),": only returns ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),"'s created before this date."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["All fields are additive; meaning that you can specify any combination of the fields, and only ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),"'s matching ",(0,t.jsx)(n.em,{children:"all"})," of the criteria will be"]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"user_id"})," and ",(0,t.jsx)(n.code,{children:"user_group"})," fields are ",(0,t.jsx)(n.em,{children:"not"})," managed by LittleHorse. Rather, they are intended to allow the user of LittleHorse to pass values managed by an external identity provider. This allows User Tasks to support a wide array of identity management systems."]})}),"\n",(0,t.jsxs)(n.p,{children:["See below for an example of searching for ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),"'s with the following criteria:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Assigned to the ",(0,t.jsx)(n.code,{children:"jedi-council"})," group, and specifically to be executed by ",(0,t.jsx)(n.code,{children:"obiwan"})]}),"\n",(0,t.jsx)(n.li,{children:"Created in the past week but at least 24 hours ago."}),"\n",(0,t.jsxs)(n.li,{children:["In the ",(0,t.jsx)(n.code,{children:"ASSIGNED"})," status."]}),"\n",(0,t.jsxs)(n.li,{children:["Of the type ",(0,t.jsx)(n.code,{children:"approve-funds-for-mission"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package io.littlehorse.quickstart;\n\nimport java.io.IOException;\nimport java.time.Instant;\nimport java.time.temporal.ChronoUnit;\nimport com.google.protobuf.Timestamp;\nimport io.littlehorse.sdk.common.LHLibUtil;\nimport io.littlehorse.sdk.common.config.LHConfig;\nimport io.littlehorse.sdk.common.proto.LittleHorseGrpc.LittleHorseBlockingStub;\nimport io.littlehorse.sdk.common.proto.SearchUserTaskRunRequest;\nimport io.littlehorse.sdk.common.proto.UserTaskRunIdList;\nimport io.littlehorse.sdk.common.proto.UserTaskRunStatus;\n\n\npublic class Main {\n    public static void main(String[] args) throws IOException, InterruptedException {\n        LHConfig config = new LHConfig();\n        LittleHorseBlockingStub client = config.getBlockingStub();\n\n        Timestamp oneWeekAgo = Timestamp.newBuilder()\n                .setSeconds(Instant.now().minus(7, ChronoUnit.DAYS).getEpochSecond())\n                .build();\n\n        Timestamp oneDayAgo = Timestamp.newBuilder()\n                .setSeconds(Instant.now().minus(7, ChronoUnit.DAYS).getEpochSecond())\n                .build();\n\n        // You can omit certain search criteria here if desired. Only one criterion is needed\n        // but you may provide as many criteria as you wish. This request shows all of the\n        // available search criteria.\n        //\n        // Note that it is a paginated request as per the "Basics" section of our grpc docs.\n        SearchUserTaskRunRequest req = SearchUserTaskRunRequest.newBuilder()\n                .setUserId("obiwan")\n                .setUserGroup("jedi-council")\n                .setUserTaskDefName("it-request")\n                .setStatus(UserTaskRunStatus.ASSIGNED)\n                .setEarliestStart(oneWeekAgo)\n                .setLatestStart(oneDayAgo)\n                .build();\n\n        UserTaskRunIdList results = client.searchUserTaskRun(req);\n        System.out.println(LHLibUtil.protoToJson(results));\n\n        // Omitted: process the UserTaskRunIdList, maybe using pagination.\n    }\n}\n'})})}),(0,t.jsx)(o.A,{value:"go",label:"Go",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"context"\n\t"time"\n\n\t"github.com/littlehorse-enterprises/littlehorse/sdk-go/common"\n\t"github.com/littlehorse-enterprises/littlehorse/sdk-go/common/model"\n\t"google.golang.org/protobuf/types/known/timestamppb"\n)\n\nfunc main() {\n\t// Get a client\n\tconfig := common.NewConfigFromEnv()\n\tclient, _ := config.GetGrpcClient()\n\n\toneWeekAgo := timestamppb.New(time.Now().Add(-7 * 24 * time.Hour))\n\toneDayAgo := timestamppb.New(time.Now().Add(-24 * time.Hour))\n\n\tuserTaskDefName := "it-request"\n\tuserGroup := "jedi-temple"\n\tuserId := "obi-wan"\n\tstatus := model.UserTaskRunStatus_ASSIGNED\n\n\t// You may provide any or all of the following options. The only requirement\n\t// is that you must specify at least one criterion.\n\tsearchReq := &model.SearchUserTaskRunRequest{\n\t\tUserTaskDefName: &userTaskDefName,\n\t\tUserId:          &userId,\n\t\tUserGroup:       &userGroup,\n\t\tStatus:          &status,\n\t\tEarliestStart:   oneWeekAgo,\n\t\tLatestStart:     oneDayAgo,\n\t}\n\n\tresults, _ := (*client).SearchUserTaskRun(context.Background(), searchReq)\n\tcommon.PrintProto(results)\n}\n'})})}),(0,t.jsx)(o.A,{value:"python",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from littlehorse.config import LHConfig\nfrom littlehorse.model import *\nfrom datetime import datetime, timedelta\nfrom google.protobuf.timestamp_pb2 import Timestamp\nfrom google.protobuf.json_format import MessageToJson\n\nconfig = LHConfig()\nclient = config.stub()\n\none_week_ago = Timestamp()\none_week_ago.FromDatetime(datetime.now() - timedelta(weeks=1))\n\none_day_ago = Timestamp()\none_day_ago.FromDatetime(datetime.now() - timedelta(days=1))\n\nresults: UserTaskRunIdList = client.SearchUserTaskRun(SearchUserTaskRunRequest(\n    user_task_def_name="it-request",\n    user_id="obiwan",\n    user_group="jedi-council",\n    status=UserTaskRunStatus.ASSIGNED,\n    earliest_start=one_week_ago,\n    latest_start=one_day_ago,\n))\n\nprint(MessageToJson(results))\n'})})})]}),"\n",(0,t.jsxs)(n.h2,{id:"display-a-usertaskrun",children:["Display a ",(0,t.jsx)(n.code,{children:"UserTaskRun"})]}),"\n",(0,t.jsxs)(n.p,{children:["Now that you've found some relevant ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),"'s that you want to display in your application, how do you show them? This is particularly important to understand when building a generic User Task Manager."]}),"\n",(0,t.jsxs)(n.p,{children:["First, the ",(0,t.jsx)(n.code,{children:"rpc GetUserTaskRun"})," request can be used to get the details for of a ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),". To use this request, you need a ",(0,t.jsx)(n.code,{children:"UserTaskRunId"})," (see the note on searching above!)."]}),"\n",(0,t.jsxs)(n.p,{children:["Once you have the ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),", you can inspect the results (if it's already completed). If you are trying to develop a frontend to execute the ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),", you can iterate through the ",(0,t.jsx)(n.code,{children:"fields"})," of the ",(0,t.jsx)(n.code,{children:"UserTaskDef"})," and determine what fields are to be displayed."]}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package io.littlehorse.quickstart;\n\nimport java.io.IOException;\nimport java.util.Map;\n\nimport io.littlehorse.sdk.common.LHLibUtil;\nimport io.littlehorse.sdk.common.config.LHConfig;\nimport io.littlehorse.sdk.common.proto.LittleHorseGrpc.LittleHorseBlockingStub;\nimport io.littlehorse.sdk.common.proto.UserTaskDef;\nimport io.littlehorse.sdk.common.proto.UserTaskField;\nimport io.littlehorse.sdk.common.proto.UserTaskRun;\nimport io.littlehorse.sdk.common.proto.UserTaskRunId;\nimport io.littlehorse.sdk.common.proto.UserTaskRunStatus;\nimport io.littlehorse.sdk.common.proto.VariableValue;\nimport io.littlehorse.sdk.common.proto.WfRunId;\n\n\npublic class Main {\n    public static void main(String[] args) throws IOException, InterruptedException {\n        LHConfig config = new LHConfig();\n        LittleHorseBlockingStub client = config.getBlockingStub();\n\n        // Get a UserTaskRunId somehow. For example, you could search for one as shown\n        // in the section above.\n        UserTaskRunId id = UserTaskRunId.newBuilder()\n                .setWfRunId(WfRunId.newBuilder().setId("e0e49b53298a4965b059a1a5df095b09"))\n                .setUserTaskGuid("8bb5d43e14894c82bb1deab7a68b32ae")\n                .build();\n\n        // Fetch the UserTaskRun\n        UserTaskRun userTaskRun = client.getUserTaskRun(id);\n\n        // See the current owners\n        String userId = userTaskRun.hasUserId() ? userTaskRun.getUserId() : null;\n        String userGroup = userTaskRun.hasUserGroup() ? userTaskRun.getUserGroup() : null;\n        System.out.println(\n                "The UserTaskRun is assigned to group \'%s\' and user \'%s\'".formatted(userGroup, userId));\n\n        // In order to see the fields, you need to fetch the `UserTaskDef`.\n        UserTaskDef utd = client.getUserTaskDef(userTaskRun.getUserTaskDefId());\n        for (UserTaskField field : utd.getFieldsList()) {\n            System.out.println("Field %s has type %s".formatted(field.getName(), field.getType()));\n        }\n\n        // If the UserTaskRun is in the `DONE` state, it will have `results`.\n        if (userTaskRun.getStatus() == UserTaskRunStatus.DONE) {\n            for (Map.Entry<String, VariableValue> resultEntry : userTaskRun.getResultsMap().entrySet()) {\n                System.out.println(\n                        resultEntry.getKey() +\n                        ": " +\n                        LHLibUtil.protoToJson(resultEntry.getValue()));\n            }\n        }\n    }\n}\n'})})}),(0,t.jsx)(o.A,{value:"go",label:"Go",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"context"\n\t"fmt"\n\t"log"\n\n\t"github.com/littlehorse-enterprises/littlehorse/sdk-go/common"\n\t"github.com/littlehorse-enterprises/littlehorse/sdk-go/common/model"\n)\n\nfunc main() {\n\t// Get a client\n\tconfig := common.NewConfigFromEnv()\n\tclient, _ := config.GetGrpcClient()\n\n\t// Get a UserTaskRunId\n\tid := &model.UserTaskRunId{\n\t\tWfRunId: &model.WfRunId{\n\t\t\tId: "e0e49b53298a4965b059a1a5df095b09",\n\t\t},\n\t\tUserTaskGuid: "8bb5d43e14894c82bb1deab7a68b32ae",\n\t}\n\n\t// Fetch the UserTaskRun\n\tuserTaskRun, err := (*client).GetUserTaskRun(context.Background(), id)\n\tif err != nil {\n\t\tlog.Fatalf("Failed to get UserTaskRun: %v", err)\n\t}\n\n\t// See the current owners\n\tuserId := ""\n\tif userTaskRun.UserId != nil {\n\t\tuserId = *userTaskRun.UserId\n\t}\n\tuserGroup := ""\n\tif userTaskRun.UserGroup != nil {\n\t\tuserGroup = *userTaskRun.UserGroup\n\t}\n\tfmt.Printf("The UserTaskRun is assigned to group \'%s\' and user \'%s\'\\n", userGroup, userId)\n\n\t// Fetch the UserTaskDef\n\tutd, err := (*client).GetUserTaskDef(context.Background(), userTaskRun.UserTaskDefId)\n\tif err != nil {\n\t\tlog.Fatalf("Failed to get UserTaskDef: %v", err)\n\t}\n\tfor _, field := range utd.Fields {\n\t\tfmt.Printf("Field %s has type %s\\n", field.Name, field.Type)\n\t}\n\n\t// If the UserTaskRun is in the DONE state, it will have results\n\tif userTaskRun.Status == model.UserTaskRunStatus_DONE {\n\t\tfmt.Println(userTaskRun.Results)\n\t}\n}\n'})})}),(0,t.jsx)(o.A,{value:"python",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from littlehorse.config import LHConfig\nfrom littlehorse.model import *\n\n\nif __name__ == \'__main__\':\n    config = LHConfig()\n    client = config.stub()\n\n    # Get a UserTaskRunId from somewhere; for example, use the search described above\n    id = UserTaskRunId(\n        wf_run_id=WfRunId(id="e0e49b53298a4965b059a1a5df095b09"),\n        user_task_guid="8bb5d43e14894c82bb1deab7a68b32ae"\n    )\n\n    # Fetch the UserTaskRun\n    user_task_run: UserTaskRun = client.GetUserTaskRun(id)\n\n    # See the current owners\n    user_id = user_task_run.user_id if user_task_run.user_id else ""\n    user_group = user_task_run.user_group if user_task_run.user_group else ""\n    print(f"The UserTaskRun is assigned to group \'{user_group}\' and user \'{user_id}\'")\n\n    # Fetch the UserTaskDef\n    utd: UserTaskDef = client.GetUserTaskDef(user_task_run.user_task_def_id)\n    for field in utd.fields:\n        print(f"Field {field.name} has type {VariableType.Name(field.type)}")\n\n    # If the UserTaskRun is in the DONE state, it will have results\n    if user_task_run.status == UserTaskRunStatus.DONE:\n        print(user_task_run.results)\n'})})})]}),"\n",(0,t.jsxs)(n.h2,{id:"complete-a-usertaskrun",children:["Complete a ",(0,t.jsx)(n.code,{children:"UserTaskRun"})]}),"\n",(0,t.jsxs)(n.p,{children:["To complete a ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),", you can use the ",(0,t.jsx)(n.code,{children:"rpc CompleteUserTaskRun"}),". The protobuf for the call is as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"rpc CompleteUserTaskRun(CompleteUserTaskRunRequest) returns (google.protobuf.Empty) {}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"CompleteUserTaskRunRequest"})," message is defined as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:"message CompleteUserTaskRunRequest {\n  UserTaskRunId user_task_run_id = 1;\n  map<string, VariableValue> results = 2;\n  string user_id = 3;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can also consult our autogenerated API documentation for the ",(0,t.jsx)(n.a,{href:"/docs/api#completeusertaskrun",children:(0,t.jsx)(n.code,{children:"rpc CompleteUserTaskRun"})})," or for ",(0,t.jsx)(n.a,{href:"/docs/api#completeusertaskrunrequest",children:(0,t.jsx)(n.code,{children:"message CompleteUserTaskRunRequest"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The first field is the ",(0,t.jsx)(n.code,{children:"UserTaskRunId"})," of the ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," which you intend to complete. The second is a map where each key is the name of a ",(0,t.jsx)(n.code,{children:"field"})," in the ",(0,t.jsx)(n.code,{children:"UserTaskDef"}),", and the value is a ",(0,t.jsx)(n.code,{children:"VariableValue"})," representing the value of that User Task Field. The ",(0,t.jsx)(n.code,{children:"user_id"})," field must be set and is the ",(0,t.jsx)(n.code,{children:"user_id"})," of the person completing the ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The current behavior of the ",(0,t.jsx)(n.code,{children:"user_id"})," field is that, if it differs from the current owner of the ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),", then the ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," will be re-assigned to the new ",(0,t.jsx)(n.code,{children:"user_id"}),". We have an ",(0,t.jsx)(n.a,{href:"https://github.com/littlehorse-enterprises/littlehorse/issues/617",children:"open ticket"})," to make this behavior configurable. If this is an important feature for you, please comment on the ticket! We're happy to bump its priority; alternatively, we do accept Pull Requests ","\ud83d\ude04","."]}),"\n",(0,t.jsxs)(n.p,{children:["In the examples below, the user ",(0,t.jsx)(n.code,{children:"obiwan"})," will complete a ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," that has two fields: a ",(0,t.jsx)(n.code,{children:"STR"})," field called ",(0,t.jsx)(n.code,{children:"requestedItem"})," set to ",(0,t.jsx)(n.code,{children:'"lightsaber"'}),", and a ",(0,t.jsx)(n.code,{children:"STR"})," field called ",(0,t.jsx)(n.code,{children:"justification"}),"."]}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package io.littlehorse.quickstart;\n\nimport java.io.IOException;\nimport io.littlehorse.sdk.common.LHLibUtil;\nimport io.littlehorse.sdk.common.config.LHConfig;\nimport io.littlehorse.sdk.common.proto.LittleHorseGrpc.LittleHorseBlockingStub;\nimport io.littlehorse.sdk.common.proto.CompleteUserTaskRunRequest;\nimport io.littlehorse.sdk.common.proto.UserTaskRunId;\nimport io.littlehorse.sdk.common.proto.WfRunId;\n\n\npublic class Main {\n    public static void main(String[] args) throws IOException, InterruptedException {\n        LHConfig config = new LHConfig();\n        LittleHorseBlockingStub client = config.getBlockingStub();\n\n        // Get a UserTaskRunId somehow. For example, you could search for one as shown\n        // in the section above.\n        UserTaskRunId id = UserTaskRunId.newBuilder()\n                .setWfRunId(WfRunId.newBuilder().setId("e0e49b53298a4965b059a1a5df095b09"))\n                .setUserTaskGuid("8bb5d43e14894c82bb1deab7a68b32ae")\n                .build();\n\n        // Complete the UserTaskRun. The key of `putResults` is the `name` of the `UserTaskField`,\n        // and the value comes from the `LHLibUtil#objToVarVal()` method which is a convenience\n        // for creating a `VariableValue`.\n        client.completeUserTaskRun(CompleteUserTaskRunRequest.newBuilder()\n                .setUserId("obiwan") // if different than the current value, it will overwrite it.\n                .putResults("requestedItem", LHLibUtil.objToVarVal("lightsaber"))\n                .putResults("justification", LHLibUtil.objToVarVal("Darth Maul kicked it down the mine shaft"))\n                .setUserTaskRunId(id)\n                .build());\n    }\n}\n'})})}),(0,t.jsx)(o.A,{value:"go",label:"Go",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"context"\n\n\t"github.com/littlehorse-enterprises/littlehorse/sdk-go/common"\n\t"github.com/littlehorse-enterprises/littlehorse/sdk-go/common/model"\n)\n\nfunc main() {\n\t// Get a client\n\tconfig := common.NewConfigFromEnv()\n\tclient, _ := config.GetGrpcClient()\n\n\t// Get a UserTaskRunId\n\tid := &model.UserTaskRunId{\n\t\tWfRunId: &model.WfRunId{\n\t\t\tId: "f2491b41b7354382988215b789187b74",\n\t\t},\n\t\tUserTaskGuid: "aa87109f001b432394cec35713ef3359",\n\t}\n\n\tcompleteRequest := &model.CompleteUserTaskRunRequest{\n\t\tUserTaskRunId: id,\n\t\tUserId:        "obi-wan",\n\t\tResults:       make(map[string]*model.VariableValue),\n\t}\n\n\trequestedItem, _ := common.InterfaceToVarVal("lightsaber")\n\tjustification, _ := common.InterfaceToVarVal("Darth Maul took it away!")\n\n\tcompleteRequest.Results["requestedItem"] = requestedItem\n\tcompleteRequest.Results["justification"] = justification\n\n\t(*client).CompleteUserTaskRun(context.Background(), completeRequest)\n}\n'})})}),(0,t.jsx)(o.A,{value:"python",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from littlehorse import to_variable_value\nfrom littlehorse.config import LHConfig\nfrom littlehorse.model import *\n\n\nif __name__ == \'__main__\':\n    config = LHConfig()\n    client = config.stub()\n\n    # Get a UserTaskRunId from somewhere; for example, use the search described above\n    id = UserTaskRunId(\n        wf_run_id=WfRunId(id="ec9d975af1524f4cbcb988512b258623"),\n        user_task_guid="f686ec1384404c27a90f86dcb4fd9edf"\n    )\n\n    client.CompleteUserTaskRun(CompleteUserTaskRunRequest(\n        user_task_run_id=id,\n        user_id="obiwan",\n        results={\n            "requestedItem": to_variable_value("lightsaber"),\n            "justification": to_variable_value("Darth Maul kicked my old one off the balcony!")\n        }\n    ))\n'})})})]}),"\n",(0,t.jsxs)(n.h2,{id:"save-a-usertaskrun",children:["Save a ",(0,t.jsx)(n.code,{children:"UserTaskRun"})]}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes, when a user is working on a User Task, they might want to save their progress without completing it. The ",(0,t.jsx)(n.a,{href:"/docs/api#saveusertaskrunprogress",children:(0,t.jsx)(n.code,{children:"rpc SaveUserTaskRunProgress"})})," allows you to do this."]}),"\n",(0,t.jsx)(n.p,{children:"Saving the progress of a User Task does the following:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Update the ",(0,t.jsx)(n.code,{children:"results"})," field in the ",(0,t.jsx)(n.a,{href:"/docs/api#usertaskrun",children:(0,t.jsx)(n.code,{children:"UserTaskRun"})})," object."]}),"\n",(0,t.jsxs)(n.li,{children:["Add a ",(0,t.jsx)(n.a,{href:"/docs/api#usertaskevent",children:(0,t.jsx)(n.code,{children:"UserTaskEvent"})})," to the ",(0,t.jsx)(n.code,{children:"events"})," field of the ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," object denoting which ",(0,t.jsx)(n.code,{children:"user_id"})," saved the progress, and what results were saved."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"policy"})," field of the ",(0,t.jsx)(n.a,{href:"/docs/api#saveusertaskrunprogressrequest",children:(0,t.jsx)(n.code,{children:"SaveUserTaskRunProgressRequest"})})," configures how to handle when the ",(0,t.jsx)(n.code,{children:"user_id"})," of the person saving the progress differs from the ",(0,t.jsx)(n.code,{children:"user_id"})," to whom the ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," is assigned."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"FAIL_IF_CLAIMED_BY_OTHER"}),": this is the default value for ",(0,t.jsx)(n.code,{children:"policy"}),". If the ",(0,t.jsx)(n.code,{children:"user_id"})," of the request does not match the ",(0,t.jsx)(n.code,{children:"user_id"})," of the ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),", then the request fails with ",(0,t.jsx)(n.code,{children:"FAILED_PRECONDITION"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"IGNORE_CLAIM"}),": this value allows the caller to save the progress of a ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," even when ",(0,t.jsx)(n.code,{children:"user_id"})," of the ",(0,t.jsx)(n.code,{children:"SaveUserTaskRunRequest"})," differs from the ",(0,t.jsx)(n.code,{children:"user_id"})," of the ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"rpc SaveUserTaskRunProgress"})," does NOT change the ownership of the ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),": the ",(0,t.jsx)(n.code,{children:"user_id"})," field is not changed by this request."]})}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package io.littlehorse.examples;\n\nimport java.io.IOException;\n\nimport io.littlehorse.sdk.common.LHLibUtil;\nimport io.littlehorse.sdk.common.config.LHConfig;\nimport io.littlehorse.sdk.common.proto.LittleHorseGrpc.LittleHorseBlockingStub;\nimport io.littlehorse.sdk.common.proto.SaveUserTaskRunProgressRequest;\nimport io.littlehorse.sdk.common.proto.SaveUserTaskRunProgressRequest.SaveUserTaskRunAssignmentPolicy;\nimport io.littlehorse.sdk.common.proto.UserTaskRunId;\nimport io.littlehorse.sdk.common.proto.WfRunId;\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        LHConfig config = new LHConfig();\n        LittleHorseBlockingStub client = config.getBlockingStub();\n\n        // Get a UserTaskRunId somehow. For example, you could search for one as shown\n        // in the section above.\n        UserTaskRunId id = UserTaskRunId.newBuilder()\n                .setWfRunId(WfRunId.newBuilder().setId("e0e49b53298a4965b059a1a5df095b09"))\n                .setUserTaskGuid("8bb5d43e14894c82bb1deab7a68b32ae")\n                .build();\n\n        // In this example, we use the FAIL_IF_CLAIMED_BY_OTHER policy.\n        client.saveUserTaskRunProgress(SaveUserTaskRunProgressRequest.newBuilder()\n                .setUserTaskRunId(id)\n                // If the UserTaskRun is assigned to someone other than obi-wan this will fail\n                .setUserId("obi-wan")\n                .setPolicy(SaveUserTaskRunAssignmentPolicy.FAIL_IF_CLAIMED_BY_OTHER)\n                .putResults("some-field", LHLibUtil.objToVarVal("lightsaber"))\n                .build());\n    }\n}\n'})})}),(0,t.jsx)(o.A,{value:"go",label:"Go",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"context"\n\n\t"github.com/littlehorse-enterprises/littlehorse/sdk-go/common"\n\t"github.com/littlehorse-enterprises/littlehorse/sdk-go/common/model"\n)\n\nfunc main() {\n\t// Get a client\n\tconfig := common.NewConfigFromEnv()\n\tclient, _ := config.GetGrpcClient()\n\n\t// Get a UserTaskRunId\n\tid := &model.UserTaskRunId{\n\t\tWfRunId: &model.WfRunId{\n\t\t\tId: "f2491b41b7354382988215b789187b74",\n\t\t},\n\t\tUserTaskGuid: "aa87109f001b432394cec35713ef3359",\n\t}\n\n\tcompleteRequest := &model.SaveUserTaskRunProgressRequest{\n\t\tUserTaskRunId: id,\n\t\tUserId:        "obi-wan",\n\t\tResults:       make(map[string]*model.VariableValue),\n\t\tPolicy:        model.SaveUserTaskRunProgressRequest_FAIL_IF_CLAIMED_BY_OTHER,\n\t}\n\n\trequestedItem, _ := common.InterfaceToVarVal("some-field")\n\tjustification, _ := common.InterfaceToVarVal("lightsaber")\n\n\tcompleteRequest.Results["requestedItem"] = requestedItem\n\tcompleteRequest.Results["justification"] = justification\n\n\t(*client).SaveUserTaskRunProgress(context.Background(), completeRequest)\n}\n'})})}),(0,t.jsx)(o.A,{value:"python",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from littlehorse import to_variable_value\nfrom littlehorse.config import LHConfig\nfrom littlehorse.model import *\n\n\nif __name__ == \'__main__\':\n    config = LHConfig()\n    client = config.stub()\n\n    # Get a UserTaskRunId from somewhere; for example, use the search described above\n    id = UserTaskRunId(\n        wf_run_id=WfRunId(id="ec9d975af1524f4cbcb988512b258623"),\n        user_task_guid="f686ec1384404c27a90f86dcb4fd9edf"\n    )\n\n    client.SaveUserTaskRunProgress(SaveUserTaskRunProgressRequest(\n        user_task_run_id=id,\n        user_id="obi-wan",\n        results={\n            "requestedItem": to_variable_value("some-field"),\n            "justification": to_variable_value("lightsaber")\n        },\n        policy= SaveUserTaskRunProgressRequest.SaveUserTaskRunAssignmentPolicy.FAIL_IF_CLAIMED_BY_OTHER\n    ))\n'})})})]}),"\n",(0,t.jsxs)(n.h2,{id:"re-assign-a-usertaskrun",children:["Re-Assign a ",(0,t.jsx)(n.code,{children:"UserTaskRun"})]}),"\n",(0,t.jsxs)(n.p,{children:["When building a task manager application, you may wish to have an administrative panel in which an admin may assign or re-assign tasks to various people. To re-assign a ",(0,t.jsx)(n.code,{children:"UserTaskRun"}),", you can use the request ",(0,t.jsx)(n.code,{children:"rpc AssignUserTaskRun"}),". The request proto is as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:"message AssignUserTaskRunRequest {\n  UserTaskRunId user_task_run_id = 1;\n\n  bool override_claim = 2;\n\n  optional string user_group = 3;\n  optional string user_id = 4;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"override_claim"})," field is set to ",(0,t.jsx)(n.code,{children:"false"})," and the ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," is already assigned to a specific ",(0,t.jsx)(n.code,{children:"user_id"}),", then the request will fail with ",(0,t.jsx)(n.code,{children:"FAILED_PRECONDITION"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["It is important to note that the request will ",(0,t.jsx)(n.em,{children:"overwrite"})," both the ",(0,t.jsx)(n.code,{children:"user_id"})," ",(0,t.jsx)(n.em,{children:"and"})," the ",(0,t.jsx)(n.code,{children:"user_group"})," with the provided values from this request. If the ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," is currently assigned to ",(0,t.jsx)(n.code,{children:"user_group == 'sales'"})," and ",(0,t.jsx)(n.code,{children:"user_id == null"}),", and a client makes the following request:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{\n    user_task_run_id: ...,\n    override_claim: false,\n    user_group: null,\n    user_id: "sarah"\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," will be assigned to ",(0,t.jsx)(n.code,{children:'user_id: "sarah"'})," and ",(0,t.jsx)(n.code,{children:"user_group: null"}),". An example request is shown below."]}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package io.littlehorse.quickstart;\n\nimport java.io.IOException;\nimport io.littlehorse.sdk.common.config.LHConfig;\nimport io.littlehorse.sdk.common.proto.LittleHorseGrpc.LittleHorseBlockingStub;\nimport io.littlehorse.sdk.common.proto.AssignUserTaskRunRequest;\nimport io.littlehorse.sdk.common.proto.UserTaskRunId;\nimport io.littlehorse.sdk.common.proto.WfRunId;\n\n\npublic class Main {\n    public static void main(String[] args) throws IOException, InterruptedException {\n        LHConfig config = new LHConfig();\n        LittleHorseBlockingStub client = config.getBlockingStub();\n\n        // Get a UserTaskRunId somehow. For example, you could search for one as shown\n        // in the section above.\n        UserTaskRunId id = UserTaskRunId.newBuilder()\n                .setWfRunId(WfRunId.newBuilder().setId("a7476518fdff4dd49f47dbe40df3c5a6"))\n                .setUserTaskGuid("709cac9fcd424d87810a6cabf66d400e")\n                .build();\n\n        // Reassign the UserTaskRun.\n        client.assignUserTaskRun(AssignUserTaskRunRequest.newBuilder()\n                .setUserId("mace-windu")\n                .setUserGroup("jedi-temple")\n                .setOverrideClaim(true)\n                .setUserTaskRunId(id)\n                .build());\n    }\n}\n'})})}),(0,t.jsx)(o.A,{value:"go",label:"Go",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"context"\n\n\t"github.com/littlehorse-enterprises/littlehorse/sdk-go/common"\n\t"github.com/littlehorse-enterprises/littlehorse/sdk-go/common/model"\n)\n\nfunc main() {\n\t// Get a client\n\tconfig := common.NewConfigFromEnv()\n\tclient, _ := config.GetGrpcClient()\n\n\t// Get a UserTaskRunId\n\tid := &model.UserTaskRunId{\n\t\tWfRunId: &model.WfRunId{\n\t\t\tId: "a7476518fdff4dd49f47dbe40df3c5a6",\n\t\t},\n\t\tUserTaskGuid: "709cac9fcd424d87810a6cabf66d400e",\n\t}\n\n\tnewUserId := "yoda"\n\tnewUserGroup := "jedi-temple"\n\n\t(*client).AssignUserTaskRun(context.Background(), &model.AssignUserTaskRunRequest{\n\t\tUserTaskRunId: id,\n\t\tUserGroup:     &newUserGroup,\n\t\tUserId:        &newUserId,\n\t\tOverrideClaim: true,\n\t})\n}\n\n'})})}),(0,t.jsx)(o.A,{value:"python",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from littlehorse import to_variable_value\nfrom littlehorse.config import LHConfig\nfrom littlehorse.model import *\n\n\nif __name__ == \'__main__\':\n    config = LHConfig()\n    client = config.stub()\n\n    # Get a UserTaskRunId from somewhere; for example, use the search described above\n    id = UserTaskRunId(\n        wf_run_id=WfRunId(id="a7476518fdff4dd49f47dbe40df3c5a6"),\n        user_task_guid="709cac9fcd424d87810a6cabf66d400e"\n    )\n\n    client.AssignUserTaskRun(AssignUserTaskRunRequest(\n        user_task_run_id=id,\n        user_id="yaddle",\n        user_group="jedi-temple",\n        override_claim=True,\n    ))\n'})})})]}),"\n",(0,t.jsxs)(n.h2,{id:"cancel-a-usertaskrun",children:["Cancel a ",(0,t.jsx)(n.code,{children:"UserTaskRun"})]}),"\n",(0,t.jsxs)(n.p,{children:['The last useful operation you may need to do when building an application using User Tasks is to "cancel" a ',(0,t.jsx)(n.code,{children:"UserTaskRun"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["By default, when a ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," is cancelled, the ",(0,t.jsx)(n.code,{children:"NodeRun"})," fails with an ",(0,t.jsx)(n.code,{children:"ERROR"}),". However, in the ",(0,t.jsx)(n.code,{children:"WfSpec"})," SDK's you can configure this behavior on a case-by-case basis. For example, you can override the behavior to throw a specific business ",(0,t.jsx)(n.code,{children:"EXCEPTION"})," upon cancellation."]})}),"\n",(0,t.jsxs)(n.p,{children:["The request ",(0,t.jsx)(n.code,{children:"rpc CancelUserTaskRun"})," is quite simple. The only edge-case is that the request throws ",(0,t.jsx)(n.code,{children:"FAILED_PRECONDITION"})," if the ",(0,t.jsx)(n.code,{children:"UserTaskRun"})," is already in the ",(0,t.jsx)(n.code,{children:"DONE"})," status."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:"message CancelUserTaskRunRequest {\n  UserTaskRunId user_task_run_id = 1;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"A simple example is shown below:"}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package io.littlehorse.quickstart;\n\nimport java.io.IOException;\nimport io.littlehorse.sdk.common.config.LHConfig;\nimport io.littlehorse.sdk.common.proto.LittleHorseGrpc.LittleHorseBlockingStub;\nimport io.littlehorse.sdk.common.proto.CancelUserTaskRunRequest;\nimport io.littlehorse.sdk.common.proto.UserTaskRunId;\nimport io.littlehorse.sdk.common.proto.WfRunId;\n\n\npublic class Main {\n    public static void main(String[] args) throws IOException, InterruptedException {\n        LHConfig config = new LHConfig();\n        LittleHorseBlockingStub client = config.getBlockingStub();\n\n        // Get a UserTaskRunId somehow. For example, you could search for one as shown\n        // in the section above.\n        UserTaskRunId id = UserTaskRunId.newBuilder()\n                .setWfRunId(WfRunId.newBuilder().setId("a7476518fdff4dd49f47dbe40df3c5a6"))\n                .setUserTaskGuid("709cac9fcd424d87810a6cabf66d400e")\n                .build();\n\n        // Reassign the UserTaskRun.\n        client.cancelUserTaskRun(CancelUserTaskRunRequest.newBuilder()\n                .setUserTaskRunId(id)\n                .build());\n    }\n}\n'})})}),(0,t.jsx)(o.A,{value:"go",label:"Go",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"context"\n\n\t"github.com/littlehorse-enterprises/littlehorse/sdk-go/common"\n\t"github.com/littlehorse-enterprises/littlehorse/sdk-go/common/model"\n)\n\nfunc main() {\n\t// Get a client\n\tconfig := common.NewConfigFromEnv()\n\tclient, _ := config.GetGrpcClient()\n\n\t// Get a UserTaskRunId\n\tid := &model.UserTaskRunId{\n\t\tWfRunId: &model.WfRunId{\n\t\t\tId: "a7476518fdff4dd49f47dbe40df3c5a6",\n\t\t},\n\t\tUserTaskGuid: "709cac9fcd424d87810a6cabf66d400e",\n\t}\n\n\t(*client).CancelUserTaskRun(context.Background(), &model.CancelUserTaskRunRequest{\n\t\tUserTaskRunId: id,\n\t})\n}\n'})})}),(0,t.jsx)(o.A,{value:"python",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from littlehorse.config import LHConfig\nfrom littlehorse.model import *\n\n\nif __name__ == \'__main__\':\n    config = LHConfig()\n    client = config.stub()\n\n    # Get a UserTaskRunId from somewhere; for example, use the search described above\n    id = UserTaskRunId(\n        wf_run_id=WfRunId(id="a7476518fdff4dd49f47dbe40df3c5a6"),\n        user_task_guid="709cac9fcd424d87810a6cabf66d400e"\n    )\n\n    client.CancelUserTaskRun(CancelUserTaskRunRequest(\n        user_task_run_id=id,\n    ))\n'})})})]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},9365:(e,n,s)=>{s.d(n,{A:()=>o});s(6540);var t=s(8215);const r={tabItem:"tabItem_Ymn6"};var i=s(4848);function o(e){let{children:n,hidden:s,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,o),hidden:s,children:n})}},1470:(e,n,s)=>{s.d(n,{A:()=>R});var t=s(6540),r=s(8215),i=s(3104),o=s(6347),a=s(205),l=s(7485),d=s(1682),c=s(9466);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:s}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:s,attributes:t,default:r}}=e;return{value:n,label:s,attributes:t,default:r}}))}(s);return function(e){const n=(0,d.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function m(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:s}=e;const r=(0,o.W6)(),i=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,l.aZ)(i),(0,t.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})}),[i,r])]}function f(e){const{defaultValue:n,queryString:s=!1,groupId:r}=e,i=h(e),[o,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=s.find((e=>e.default))??s[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[d,u]=p({queryString:s,groupId:r}),[f,g]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,i]=(0,c.Dv)(s);return[r,(0,t.useCallback)((e=>{s&&i.set(e)}),[s,i])]}({groupId:r}),k=(()=>{const e=d??f;return m({value:e,tabValues:i})?e:null})();(0,a.A)((()=>{k&&l(k)}),[k]);return{selectedValue:o,selectValue:(0,t.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,i]),tabValues:i}}var g=s(2303);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=s(4848);function j(e){let{className:n,block:s,selectedValue:t,selectValue:o,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),c=e=>{const n=e.currentTarget,s=l.indexOf(n),r=a[s].value;r!==t&&(d(n),o(r))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const s=l.indexOf(e.currentTarget)+1;n=l[s]??l[0];break}case"ArrowLeft":{const s=l.indexOf(e.currentTarget)-1;n=l[s]??l[l.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":s},n),children:a.map((e=>{let{value:n,label:s,attributes:i}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>l.push(e),onKeyDown:u,onClick:c,...i,className:(0,r.A)("tabs__item",k.tabItem,i?.className,{"tabs__item--active":t===n}),children:s??n},n)}))})}function T(e){let{lazy:n,children:s,selectedValue:r}=e;const i=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===r));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function b(e){const n=f(e);return(0,x.jsxs)("div",{className:(0,r.A)("tabs-container",k.tabList),children:[(0,x.jsx)(j,{...n,...e}),(0,x.jsx)(T,{...n,...e})]})}function R(e){const n=(0,g.A)();return(0,x.jsx)(b,{...e,children:u(e.children)},String(n))}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(6540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);