"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[1084],{6605:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>c});var s=n(4848),a=n(8453);const d={sidebar_label:"Variables"},l="VariableDef and Variable",t={id:"concepts/variables",title:"VariableDef and Variable",description:"A Variable in LittleHorse serves the same purpose as a variable in programming",source:"@site/docs/04-concepts/06-variables.md",sourceDirName:"04-concepts",slug:"/concepts/variables",permalink:"/docs/concepts/variables",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_label:"Variables"},sidebar:"tutorialSidebar",previous:{title:"User Tasks",permalink:"/docs/concepts/user-tasks"},next:{title:"Task Workers",permalink:"/docs/concepts/task-workers"}},r={},c=[{value:"In the API",id:"in-the-api",level:2},{value:"Variable Types",id:"variable-types",level:2},{value:"<code>INT</code>",id:"int",level:4},{value:"<code>DOUBLE</code>",id:"double",level:4},{value:"<code>STR</code>",id:"str",level:4},{value:"<code>BOOL</code>",id:"bool",level:4},{value:"<code>JSON_OBJ</code>",id:"json_obj",level:4},{value:"<code>JSON_ARR</code>",id:"json_arr",level:4},{value:"<code>BYTES</code>",id:"bytes",level:4},{value:"<code>NULL</code>",id:"null",level:4},{value:"Using Varibles",id:"using-varibles",level:2},{value:"Mutating Variables",id:"mutating-variables",level:2},{value:"Selecting the Variable to Mutate",id:"selecting-the-variable-to-mutate",level:3},{value:"Mutation Types",id:"mutation-types",level:3},{value:"<code>ASSIGN</code>",id:"assign",level:4},{value:"<code>ADD</code>",id:"add",level:4},{value:"<code>SUBTRACT</code>",id:"subtract",level:4},{value:"<code>EXTEND</code>",id:"extend",level:4},{value:"<code>DIVIDE</code>",id:"divide",level:4},{value:"<code>MULTIPLY</code>",id:"multiply",level:4},{value:"<code>REMOVE_IF_PRESENT</code>",id:"remove_if_present",level:4},{value:"<code>REMOVE_INDEX</code>",id:"remove_index",level:4},{value:"<code>REMOVE_KEY</code>",id:"remove_key",level:4},{value:"The Right-Hand-Side",id:"the-right-hand-side",level:3},{value:"Example (Java SDK)",id:"example-java-sdk",level:3}];function o(e){const i={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(i.h1,{id:"variabledef-and-variable",children:[(0,s.jsx)(i.code,{children:"VariableDef"})," and ",(0,s.jsx)(i.code,{children:"Variable"})]}),"\n",(0,s.jsxs)(i.p,{children:["A ",(0,s.jsx)(i.code,{children:"Variable"})," in LittleHorse serves the same purpose as a variable in programming: it is a placeholder for a value that can be used in computation later. A ",(0,s.jsx)(i.code,{children:"VariableDef"})," in LittleHorse defines a ",(0,s.jsx)(i.code,{children:"Variable"}),". ",(0,s.jsx)(i.code,{children:"VariableDef"}),"s are mainly used in two places:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["To define input variables in a ",(0,s.jsx)(i.code,{children:"TaskDef"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:["To define variables used in a ",(0,s.jsx)(i.code,{children:"ThreadSpec"})," (part of a ",(0,s.jsx)(i.code,{children:"WfSpec"}),")."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"in-the-api",children:"In the API"}),"\n",(0,s.jsxs)(i.p,{children:["A ",(0,s.jsx)(i.code,{children:"Variable"})," is a searchable object in the LittleHorse API. It contains the name and value of a specific variable instance in a ",(0,s.jsx)(i.code,{children:"ThreadRun"}),"."]}),"\n",(0,s.jsx)(i.p,{children:"The `Variable has a composite ID defined as follows:"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["The ",(0,s.jsx)(i.code,{children:"wfRunId"}),", which is the ID of the associated ",(0,s.jsx)(i.code,{children:"WfRun"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:["The ",(0,s.jsx)(i.code,{children:"threadRunNumber"}),", which is the ID of the associated ",(0,s.jsx)(i.code,{children:"ThreadRun"})," (since a ",(0,s.jsx)(i.code,{children:"Variable"})," lives within a specific ",(0,s.jsx)(i.code,{children:"ThreadRun"}),")."]}),"\n",(0,s.jsxs)(i.li,{children:["The ",(0,s.jsx)(i.code,{children:"name"}),", which is the name of the ",(0,s.jsx)(i.code,{children:"Variable"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"Variable"})," object has a ",(0,s.jsx)(i.code,{children:"name"}),", ",(0,s.jsx)(i.code,{children:"type"}),", and a ",(0,s.jsx)(i.code,{children:"VariableValue"}),"."]}),"\n",(0,s.jsx)(i.admonition,{type:"info",children:(0,s.jsxs)(i.p,{children:["Note that a ",(0,s.jsx)(i.code,{children:"VariableDef"})," in itself is not a get-able object in the LittleHorse API; it is a sub-structure of other objects (generally ",(0,s.jsx)(i.code,{children:"TaskDef"})," and ",(0,s.jsx)(i.code,{children:"WfSpec"}),")."]})}),"\n",(0,s.jsx)(i.h2,{id:"variable-types",children:"Variable Types"}),"\n",(0,s.jsx)(i.p,{children:"LittleHorse currently supports variables of the following types:"}),"\n",(0,s.jsx)(i.h4,{id:"int",children:(0,s.jsx)(i.code,{children:"INT"})}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"INT"})," variable type is stored as a 64-bit integer. The ",(0,s.jsx)(i.code,{children:"INT"})," can be cast to a ",(0,s.jsx)(i.code,{children:"DOUBLE"}),"."]}),"\n",(0,s.jsx)(i.h4,{id:"double",children:(0,s.jsx)(i.code,{children:"DOUBLE"})}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"DOUBLE"})," variable type is a 64-bit floating point number. It can be cast to an ",(0,s.jsx)(i.code,{children:"INT"}),"."]}),"\n",(0,s.jsx)(i.h4,{id:"str",children:(0,s.jsx)(i.code,{children:"STR"})}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"STR"})," variable type is stored as a String. ",(0,s.jsx)(i.code,{children:"INT"}),", ",(0,s.jsx)(i.code,{children:"DOUBLE"}),", and ",(0,s.jsx)(i.code,{children:"BOOL"})," variables can be cast to a ",(0,s.jsx)(i.code,{children:"STR"}),"."]}),"\n",(0,s.jsx)(i.h4,{id:"bool",children:(0,s.jsx)(i.code,{children:"BOOL"})}),"\n",(0,s.jsxs)(i.p,{children:["A ",(0,s.jsx)(i.code,{children:"BOOL"})," is a simple boolean switch."]}),"\n",(0,s.jsx)(i.h4,{id:"json_obj",children:(0,s.jsx)(i.code,{children:"JSON_OBJ"})}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"JSON_OBJ"})," variable allows you to store complex objects in the JSON format. When using the Java and GoLang SDK's, the ",(0,s.jsx)(i.code,{children:"JSON_OBJ"})," variable type is often used transparently to the user. For example, the Java Task Worker SDK can inspect your method signature and automatically deserialize an input variable into a POJO."]}),"\n",(0,s.jsx)(i.h4,{id:"json_arr",children:(0,s.jsx)(i.code,{children:"JSON_ARR"})}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"JSON_ARR"})," variable allows you to store collections of objects as a JSON array. The behavior is similar to the ",(0,s.jsx)(i.code,{children:"JSON_OBJ"})," variable type."]}),"\n",(0,s.jsx)(i.h4,{id:"bytes",children:(0,s.jsx)(i.code,{children:"BYTES"})}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"BYTES"})," variable type allows you to store an arbitrary byte string."]}),"\n",(0,s.jsx)(i.h4,{id:"null",children:(0,s.jsx)(i.code,{children:"NULL"})}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"NULL"})," variable type is used for ",(0,s.jsx)(i.code,{children:"Node"}),"s that have no output, and for ",(0,s.jsx)(i.code,{children:"Variable"}),"s that have not yet been initialized (for example, if their value is not provided when starting the ",(0,s.jsx)(i.code,{children:"ThreadRun"}),")."]}),"\n",(0,s.jsx)(i.h2,{id:"using-varibles",children:"Using Varibles"}),"\n",(0,s.jsx)(i.admonition,{type:"note",children:(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"VariableAssignment"})," protobuf structure described in this section applies to the JSON ",(0,s.jsx)(i.code,{children:"WfSpec"})," specification. The SDK's (eg. Java, Go, Python) abstract away the ",(0,s.jsx)(i.code,{children:"VariableAssignment"})," when authoring a ",(0,s.jsx)(i.code,{children:"WfSpec"}),". Nevertheless, it is useful to understand how it works."]})}),"\n",(0,s.jsxs)(i.p,{children:["Recall that a ",(0,s.jsx)(i.code,{children:"TASK"})," node takes in multiple input variables. In the raw JSON ",(0,s.jsx)(i.code,{children:"WfSpec"}),", you do this via what's called a ",(0,s.jsx)(i.code,{children:"VariableAssignment"}),". The ",(0,s.jsx)(i.code,{children:"VariableAssignment"})," is much the same as passing an argument to a function call in a programming language."]}),"\n",(0,s.jsxs)(i.p,{children:["A ",(0,s.jsx)(i.code,{children:"VariableAssignment"})," can specify the Variable Value to be used in one of the following three ways:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Pass in a literal value (eg. a ",(0,s.jsx)(i.code,{children:"STR"})," or an ",(0,s.jsx)(i.code,{children:"INT"}),")."]}),"\n",(0,s.jsxs)(i.li,{children:["Use a value from a ",(0,s.jsx)(i.code,{children:"Variable"})," in your workflow."]}),"\n",(0,s.jsxs)(i.li,{children:["A ",(0,s.jsx)(i.code,{children:"format_string"}),", which takes in a raw string and then a list of ",(0,s.jsx)(i.code,{children:"VariableAssignment"}),"s to fill in any parameters."]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"VariableAssignment"}),"s are used in several places, including:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Passing inputs to a ",(0,s.jsx)(i.code,{children:"TASK"})," node."]}),"\n",(0,s.jsx)(i.li,{children:"Acting as the left-hand-side and right-hand-side for conditional expressions."}),"\n",(0,s.jsx)(i.li,{children:"Acting as the right-hand-side for variable mutations."}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"mutating-variables",children:"Mutating Variables"}),"\n",(0,s.jsxs)(i.p,{children:["Upon the completion of any ",(0,s.jsx)(i.code,{children:"NodeRun"})," (no matter what type of ",(0,s.jsx)(i.code,{children:"Node"}),"), you may specify a list of Variable Mutations for LittleHorse to execute. A ",(0,s.jsx)(i.code,{children:"VariableMutation"})," requires the following information:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["The name of the ",(0,s.jsx)(i.code,{children:"Variable"})," to mutate (LHS)."]}),"\n",(0,s.jsx)(i.li,{children:"The type of mutation."}),"\n",(0,s.jsx)(i.li,{children:'The "right-hand-side" of the mutation (RHS).'}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"We will unpack each of those sections in more detail below."}),"\n",(0,s.jsx)(i.h3,{id:"selecting-the-variable-to-mutate",children:"Selecting the Variable to Mutate"}),"\n",(0,s.jsxs)(i.p,{children:["This is relatively straight forward--you only need to provide the ",(0,s.jsx)(i.code,{children:"name"})," of the ",(0,s.jsx)(i.code,{children:"Variable"})," that you wish to mutate. The named variable could belong to a parent (or grandparent) ",(0,s.jsx)(i.code,{children:"ThreadRun"}),"; the effect is the same."]}),"\n",(0,s.jsxs)(i.p,{children:["For ",(0,s.jsx)(i.code,{children:"JSON_OBJ"})," and ",(0,s.jsx)(i.code,{children:"JSON_ARR"})," ",(0,s.jsx)(i.code,{children:"Variable"}),"s, you can mutate a sub-object of the ",(0,s.jsx)(i.code,{children:"Variable"})," by specifying a ",(0,s.jsx)(i.code,{children:"jsonPath"}),"."]}),"\n",(0,s.jsx)(i.h3,{id:"mutation-types",children:"Mutation Types"}),"\n",(0,s.jsx)(i.p,{children:"Each Variable Type supports different sets of mutations. They are all listed below:"}),"\n",(0,s.jsx)(i.h4,{id:"assign",children:(0,s.jsx)(i.code,{children:"ASSIGN"})}),"\n",(0,s.jsxs)(i.p,{children:["This mutation simply copies the value of the RHS into the LHS ",(0,s.jsx)(i.code,{children:"Variable"}),". It is supported for any Variable Type on the LHS, provided that the RHS type matches or can be cast to the type of the LHS."]}),"\n",(0,s.jsxs)(i.p,{children:["You can use the ",(0,s.jsx)(i.code,{children:"ASSIGN"})," mutation to set a key in a ",(0,s.jsx)(i.code,{children:"JSON_OBJ"})," variable by using a ",(0,s.jsx)(i.code,{children:"jsonPath"})," on the LHS, and you can likewise set a specific item of a ",(0,s.jsx)(i.code,{children:"JSON_ARR"})," by using a ",(0,s.jsx)(i.code,{children:"jsonPath"})," on the LHS."]}),"\n",(0,s.jsx)(i.h4,{id:"add",children:(0,s.jsx)(i.code,{children:"ADD"})}),"\n",(0,s.jsxs)(i.p,{children:["This mutation adds the RHS to the LHS. It is supported for ",(0,s.jsx)(i.code,{children:"INT"})," and ",(0,s.jsx)(i.code,{children:"DOUBLE"}),"."]}),"\n",(0,s.jsx)(i.h4,{id:"subtract",children:(0,s.jsx)(i.code,{children:"SUBTRACT"})}),"\n",(0,s.jsxs)(i.p,{children:["This mutation subtracts the RHS from the LHS. It is supported for ",(0,s.jsx)(i.code,{children:"INT"})," and ",(0,s.jsx)(i.code,{children:"DOUBLE"}),"."]}),"\n",(0,s.jsx)(i.h4,{id:"extend",children:(0,s.jsx)(i.code,{children:"EXTEND"})}),"\n",(0,s.jsxs)(i.p,{children:["This mutation is supported for the ",(0,s.jsx)(i.code,{children:"STR"})," and ",(0,s.jsx)(i.code,{children:"JSON_ARR"})," types. In the ",(0,s.jsx)(i.code,{children:"STR"}),", the ",(0,s.jsx)(i.code,{children:"RHS"})," is appended to the end of the ",(0,s.jsx)(i.code,{children:"LHS"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["With a ",(0,s.jsx)(i.code,{children:"JSON_ARR"}),", the ",(0,s.jsx)(i.code,{children:"RHS"})," (which can be any type) is appended to the end of the list."]}),"\n",(0,s.jsx)(i.h4,{id:"divide",children:(0,s.jsx)(i.code,{children:"DIVIDE"})}),"\n",(0,s.jsxs)(i.p,{children:["This mutation divides the LHS by the RHS. It is supported for ",(0,s.jsx)(i.code,{children:"INT"})," and ",(0,s.jsx)(i.code,{children:"DOUBLE"}),"."]}),"\n",(0,s.jsx)(i.h4,{id:"multiply",children:(0,s.jsx)(i.code,{children:"MULTIPLY"})}),"\n",(0,s.jsxs)(i.p,{children:["This mutation multiplies the LHS by the RHS. It is supported for ",(0,s.jsx)(i.code,{children:"INT"})," and ",(0,s.jsx)(i.code,{children:"DOUBLE"}),"."]}),"\n",(0,s.jsx)(i.h4,{id:"remove_if_present",children:(0,s.jsx)(i.code,{children:"REMOVE_IF_PRESENT"})}),"\n",(0,s.jsxs)(i.p,{children:["This mutation applies only to the ",(0,s.jsx)(i.code,{children:"JSON_ARR"})," LHS. It removes all occurrences of the ",(0,s.jsx)(i.code,{children:"RHS"})," (by equality) from the list."]}),"\n",(0,s.jsx)(i.h4,{id:"remove_index",children:(0,s.jsx)(i.code,{children:"REMOVE_INDEX"})}),"\n",(0,s.jsxs)(i.p,{children:["This mutation applies only to the ",(0,s.jsx)(i.code,{children:"JSON_ARR"})," LHS and an ",(0,s.jsx)(i.code,{children:"INT"})," RHS. It removes the object at the index specified by the RHS."]}),"\n",(0,s.jsx)(i.h4,{id:"remove_key",children:(0,s.jsx)(i.code,{children:"REMOVE_KEY"})}),"\n",(0,s.jsxs)(i.p,{children:["THis mutation applies only to the ",(0,s.jsx)(i.code,{children:"JSON_OBJ"})," LHS and a ",(0,s.jsx)(i.code,{children:"STR"})," RHS. It removes the specified key from the Json object."]}),"\n",(0,s.jsx)(i.h3,{id:"the-right-hand-side",children:"The Right-Hand-Side"}),"\n",(0,s.jsx)(i.p,{children:'Each mutation type is a "verb" which requires a right-hand-side "object".'}),"\n",(0,s.jsxs)(i.p,{children:["The right-hand-side is simply another ",(0,s.jsx)(i.code,{children:"VariableAssignment"}),": it can be just a literal value, or it can refer to another ",(0,s.jsx)(i.code,{children:"Variable"})," in the workflow."]}),"\n",(0,s.jsx)(i.h3,{id:"example-java-sdk",children:"Example (Java SDK)"}),"\n",(0,s.jsxs)(i.p,{children:["While this page is intended to be conceptual, the concepts become much clear with an example. In Java, here is how to mutate a sub-field of a ",(0,s.jsx)(i.code,{children:"JSON_OBJ"})," variable. Let's say the json structure looks like:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:'{\n    "foo": 1,\n    "bar": "baz"\n}\n'})}),"\n",(0,s.jsxs)(i.p,{children:["If we wanted to mutate the ",(0,s.jsx)(i.code,{children:"Variable"})," by adding 2 to the ",(0,s.jsx)(i.code,{children:"foo"})," field, we would do so as follows:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:'WFRunVariable myVar = wf.addVariable("my-var", VariableTypePb.JSON_OBJ);\n\n// omitted: execute some tasks\n\nwf.mutate(\n    myVar.jsonPath("$.foo"),\n    VariableMutationTypePb.ADD,\n    2\n)\n'})}),"\n",(0,s.jsxs)(i.p,{children:["Future versions of LittleHorse will allow you to optionally provide schemas for your ",(0,s.jsx)(i.code,{children:"Variable"}),"s so as to validate mutations at ",(0,s.jsx)(i.code,{children:"WfSpec"})," compile-time rather than at ",(0,s.jsx)(i.code,{children:"WfRun"})," run-time."]})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>t});var s=n(6540);const a={},d=s.createContext(a);function l(e){const i=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(d.Provider,{value:i},e.children)}}}]);