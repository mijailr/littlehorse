"use strict";(self.webpackChunklh_site=self.webpackChunklh_site||[]).push([[3133],{4467:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>t,frontMatter:()=>d,metadata:()=>a,toc:()=>l});var i=s(4848),r=s(8453);const d={},c="Workflows",a={id:"concepts/workflows",title:"Workflows",description:"In LittleHorse, the WfSpec object is a Metadata Object defining the blueprint for a WfRun, which is a running instance of a workflow.",source:"@site/docs/04-concepts/01-workflows.md",sourceDirName:"04-concepts",slug:"/concepts/workflows",permalink:"/docs/concepts/workflows",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Concepts",permalink:"/docs/concepts/"},next:{title:"Tasks",permalink:"/docs/concepts/tasks"}},o={},l=[{value:"Workflow Structure",id:"workflow-structure",level:2},{value:"Threads",id:"threads",level:3},{value:"Variables",id:"variables",level:3},{value:"Nodes",id:"nodes",level:3},{value:"Threading Model",id:"threading-model",level:2},{value:"Child Threads",id:"child-threads",level:3},{value:"Variable Scoping",id:"variable-scoping",level:3},{value:"Failure Handling",id:"failure-handling",level:3},{value:"<code>ERROR</code>s and <code>EXCEPTION</code>s",id:"errors-and-exceptions",level:4},{value:"Interrupts",id:"interrupts",level:3},{value:"Lifecycle",id:"lifecycle",level:2},{value:"Halting a Workflow",id:"halting-a-workflow",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"workflows",children:"Workflows"}),"\n",(0,i.jsxs)(n.p,{children:["In LittleHorse, the ",(0,i.jsx)(n.a,{href:"/docs/api#wfspec",children:(0,i.jsx)(n.code,{children:"WfSpec"})})," object is a ",(0,i.jsx)(n.em,{children:"Metadata Object"})," defining the blueprint for a ",(0,i.jsx)(n.a,{href:"/docs/api#wfrun",children:(0,i.jsx)(n.code,{children:"WfRun"})}),", which is a running instance of a workflow."]}),"\n",(0,i.jsxs)(n.p,{children:["A simple way of thinking about it is that a ",(0,i.jsx)(n.code,{children:"WfSpec"})," is a directed graph consisting of ",(0,i.jsx)(n.code,{children:"Node"}),"s and ",(0,i.jsx)(n.code,{children:"Edge"}),"s, where a ",(0,i.jsx)(n.code,{children:"Node"}),' defines a "step" of the workflow process, and an ',(0,i.jsx)(n.code,{children:"Edge"})," tells the workflow what ",(0,i.jsx)(n.code,{children:"Node"})," to go to next."]}),"\n",(0,i.jsx)(n.h2,{id:"workflow-structure",children:"Workflow Structure"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"WfSpec"})," (Workflow Specification) is a blueprint that defines the control flow of your ",(0,i.jsx)(n.code,{children:"WfRun"}),"s (Workflow Run). Before you can run a ",(0,i.jsx)(n.code,{children:"WfRun"}),", you must first register a ",(0,i.jsx)(n.code,{children:"WfSpec"})," in LittleHorse (for an example of how to do that, see ",(0,i.jsx)(n.a,{href:"/docs/developer-guide/wfspec-development/basics#quickstart",children:"here"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"WfSpec"})," contains a set of ",(0,i.jsx)(n.code,{children:"ThreadSpec"}),"s, with one ",(0,i.jsx)(n.em,{children:"special"})," ",(0,i.jsx)(n.code,{children:"ThreadSpec"})," that is known as the ",(0,i.jsx)(n.em,{children:"entrypoint"}),". When you run a ",(0,i.jsx)(n.code,{children:"WfSpec"})," to create a ",(0,i.jsx)(n.code,{children:"WfRun"}),", the first ",(0,i.jsx)(n.code,{children:"ThreadSpec"})," that is run is the ",(0,i.jsx)(n.em,{children:"entrypoint"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["You can see the exact structure of a ",(0,i.jsx)(n.code,{children:"WfSpec"})," as a protobuf message ",(0,i.jsx)(n.a,{href:"/docs/api#wfspec",children:"in our api docs"}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.a,{href:"/docs/api#wfrun",children:(0,i.jsx)(n.code,{children:"WfRun"})}),", short for Workflow Run, is an instantiation of a ",(0,i.jsx)(n.code,{children:"WfSpec"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["In the programming analogy, you could think of a ",(0,i.jsx)(n.code,{children:"WfRun"})," as a process that is running your ",(0,i.jsx)(n.code,{children:"WfSpec"})," program. A ",(0,i.jsx)(n.code,{children:"ThreadRun"})," is a thread in that program."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"WfRun"})," is created by the LittleHorse Server when a user requests the server to run a ",(0,i.jsx)(n.code,{children:"WfSpec"}),", for example using the ",(0,i.jsx)(n.a,{href:"/docs/api#runwf",children:(0,i.jsx)(n.code,{children:"rpc RunWf"})}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"threads",children:"Threads"}),"\n",(0,i.jsxs)(n.p,{children:["A workflow consists of one or more threads. A thread in LittleHorse is analogous to a thread in programming: it has its own thread execution context (set of LH ",(0,i.jsx)(n.code,{children:"Variables"}),") and it can execute one instruction (in LH, a ",(0,i.jsx)(n.code,{children:"Node"}),") at a time."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"ThreadSpec"})," is a blueprint for a single thread in a ",(0,i.jsx)(n.code,{children:"WfSpec"}),". When a ",(0,i.jsx)(n.code,{children:"ThreadSpec"})," is run, you get a ",(0,i.jsx)(n.code,{children:"ThreadRun"}),". Logically, a ",(0,i.jsx)(n.code,{children:"ThreadSpec"})," is a directed graph of ",(0,i.jsx)(n.code,{children:"Node"}),"s and ",(0,i.jsx)(n.code,{children:"Edge"}),"s, where a ",(0,i.jsx)(n.code,{children:"Node"}),' represents a "step" to execute in the ',(0,i.jsx)(n.code,{children:"ThreadRun"}),", and the ",(0,i.jsx)(n.code,{children:"Edge"}),"s tell LittleHorse what ",(0,i.jsx)(n.code,{children:"Node"})," the ",(0,i.jsx)(n.code,{children:"ThreadRun"})," should move to next."]}),"\n",(0,i.jsxs)(n.p,{children:["In the LittleHorse Dashboard, when you click on a ",(0,i.jsx)(n.code,{children:"WfSpec"})," you are shown the ",(0,i.jsx)(n.em,{children:"entrypoint"})," ",(0,i.jsx)(n.code,{children:"ThreadSpec"}),". In the picture you see, the circles and boxes are ",(0,i.jsx)(n.code,{children:"Node"}),"s, and the arrows are ",(0,i.jsx)(n.code,{children:"Edge"}),"s."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"ThreadRun"})," can only execute one ",(0,i.jsx)(n.code,{children:"Node"})," at a time. If you want a ",(0,i.jsx)(n.code,{children:"WfRun"})," to execute multiple things at a time (either to parallelize ",(0,i.jsx)(n.code,{children:"TaskRun"}),"'s for performance reasons, or to wait for two business events to happen in parallel, or any other reason), then you need your ",(0,i.jsx)(n.code,{children:"WfRun"})," to start multiple ",(0,i.jsx)(n.code,{children:"ThreadRun"}),"s at a time. See the section on Child Threads below for how this works."]}),"\n",(0,i.jsxs)(n.p,{children:["For the highly curious reader, you can inspect the structure of a ",(0,i.jsx)(n.code,{children:"ThreadRun"})," in our ",(0,i.jsx)(n.a,{href:"/docs/api#threadrun",children:"api docs here"}),". At a high level it contains a status and a pointer to the current ",(0,i.jsx)(n.code,{children:"NodeRun"})," that's being executed. The real data is stored in the ",(0,i.jsx)(n.code,{children:"NodeRun"}),", which you can retrieve from the API as a separate object."]}),"\n",(0,i.jsx)(n.h3,{id:"variables",children:"Variables"}),"\n",(0,i.jsxs)(n.p,{children:["Just as a program or function can store state in variables, a ",(0,i.jsx)(n.code,{children:"WfRun"})," can store state in ",(0,i.jsx)(n.code,{children:"Variable"}),"s as well. Variables in LittleHorse are defined in the ",(0,i.jsx)(n.code,{children:"ThreadSpec"}),", and as such are scoped to a ",(0,i.jsx)(n.code,{children:"ThreadRun"}),". Note that a child ",(0,i.jsx)(n.code,{children:"ThreadRun"})," may access the variables of its parents."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"Variable"})," is an object that you can fetch from the LittleHorse API. A ",(0,i.jsx)(n.code,{children:"Variable"})," is uniquely identified by a ",(0,i.jsx)(n.a,{href:"/docs/api#variableid",children:(0,i.jsx)(n.code,{children:"VariableId"})}),", which has three fields:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"wf_run_id"}),", which is the ID of the associated ",(0,i.jsx)(n.code,{children:"WfRun"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"thread_run_number"}),", which is the ID of the associated ",(0,i.jsx)(n.code,{children:"ThreadRun"})," (since a ",(0,i.jsx)(n.code,{children:"Variable"})," lives within a specific ",(0,i.jsx)(n.code,{children:"ThreadRun"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"name"}),", which is the name of the ",(0,i.jsx)(n.code,{children:"Variable"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"Variable"})," is created when a ",(0,i.jsx)(n.code,{children:"ThreadRun"})," is created. Since it's possible to have multiple ",(0,i.jsx)(n.code,{children:"ThreadRun"}),"s created with the same ",(0,i.jsx)(n.code,{children:"ThreadSpec"})," (for example, iterating over a list and launching a child thread to process each item), simply identifying a ",(0,i.jsx)(n.code,{children:"Variable"})," by its ",(0,i.jsx)(n.code,{children:"name"})," and ",(0,i.jsx)(n.code,{children:"wf_run_id"})," is insufficient. That is why the ",(0,i.jsx)(n.code,{children:"VariableId"})," also includes the ",(0,i.jsx)(n.code,{children:"thread_run_number"}),": a ",(0,i.jsx)(n.code,{children:"Variable"})," is uniquely identified by its name, workflow run id, and thread run number."]}),"\n",(0,i.jsxs)(n.p,{children:["You can fetch ",(0,i.jsx)(n.code,{children:"Variable"}),"s using ",(0,i.jsx)(n.a,{href:"/docs/api#getvariable",children:(0,i.jsx)(n.code,{children:"rpc GetVariable"})}),", ",(0,i.jsx)(n.a,{href:"/docs/api#searchvariable",children:(0,i.jsx)(n.code,{children:"rpc SearchVariable"})}),", and ",(0,i.jsx)(n.a,{href:"/docs/api#listvariables",children:(0,i.jsx)(n.code,{children:"rpc ListVariables"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Variables can be of certain types, which you can find in the ",(0,i.jsx)(n.a,{href:"/docs/api#variabletype",children:(0,i.jsx)(n.code,{children:"VariableType"})})," enum."]}),"\n",(0,i.jsxs)(n.p,{children:["Lastly, a ",(0,i.jsx)(n.code,{children:"Variable"}),"'s ",(0,i.jsx)(n.a,{href:"/docs/api#variablevalue",children:"value"})," can be set when the thread is created, and the value can be mutated using a ",(0,i.jsx)(n.a,{href:"/docs/api#variablemutation",children:(0,i.jsx)(n.code,{children:"VariableMutation"})})," after the completion of a ",(0,i.jsx)(n.code,{children:"Node"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"nodes",children:"Nodes"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"Node"}),' is a "step" in a ',(0,i.jsx)(n.code,{children:"ThreadRun"}),". LittleHorse allows for many different types of ",(0,i.jsx)(n.code,{children:"Node"}),"s in a ",(0,i.jsx)(n.code,{children:"WfSpec"}),", including:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api#tasknode",children:(0,i.jsx)(n.code,{children:"TASK"})})," nodes, which allow for executing a ",(0,i.jsx)(n.code,{children:"TaskRun"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api#usertasknode",children:(0,i.jsx)(n.code,{children:"USER_TASK"})})," nodes, which allow for executing ",(0,i.jsx)(n.a,{href:"/docs/concepts/user-tasks",children:"User Tasks"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api#externaleventnode",children:(0,i.jsx)(n.code,{children:"EXTERNAL_EVENT"})})," nodes, which allow for waiting for an ",(0,i.jsx)(n.a,{href:"/docs/concepts/external-events",children:"External Event"})," to arrive."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api#startthreadnode",children:(0,i.jsx)(n.code,{children:"START_THREAD"})})," nodes, which allow for starting child ",(0,i.jsx)(n.code,{children:"ThreadRun"}),"s."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api#waitforthreadsnode",children:(0,i.jsx)(n.code,{children:"WAIT_FOR_THREADS"})})," nodes, which allow for waiting for child ",(0,i.jsx)(n.code,{children:"ThreadRun"}),"s to complete."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["For a complete list of all of the available node types, check out the ",(0,i.jsx)(n.a,{href:"/docs/api#node",children:(0,i.jsx)(n.code,{children:"Node"})})," protobuf message."]})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"Node"})," is not a fully-fledged object in the LittleHorse API. Rather, it is a sub-structure of the ",(0,i.jsx)(n.code,{children:"WfSpec"})," object, which ",(0,i.jsx)(n.em,{children:"is"})," an object in the LH API."]}),"\n",(0,i.jsxs)(n.p,{children:["When a ",(0,i.jsx)(n.code,{children:"ThreadRun"})," arrives at a ",(0,i.jsx)(n.code,{children:"Node"}),", LittleHorse creates a ",(0,i.jsx)(n.a,{href:"/docs/api#noderun",children:(0,i.jsx)(n.code,{children:"NodeRun"})}),", which is an instance of a ",(0,i.jsx)(n.code,{children:"Node"}),". In the case of a ",(0,i.jsx)(n.code,{children:"TASK"})," Node, a ",(0,i.jsx)(n.code,{children:"TaskNodeRun"})," is created (which also causes the creation of a ",(0,i.jsx)(n.a,{href:"/docs/concepts/tasks",children:"Task"})," which is dispatched to a Task Worker)."]}),"\n",(0,i.jsxs)(n.p,{children:["In contrast to a ",(0,i.jsx)(n.code,{children:"Node"}),", a ",(0,i.jsx)(n.code,{children:"NodeRun"})," is an ",(0,i.jsx)(n.a,{href:"/docs/api#noderun",children:"object in the LH API"}),", which stores data about:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["When the ",(0,i.jsx)(n.code,{children:"ThreadRun"})," arrived at the ",(0,i.jsx)(n.code,{children:"Node"})]}),"\n",(0,i.jsxs)(n.li,{children:["When the ",(0,i.jsx)(n.code,{children:"NodeRun"})," was completed (if at all)."]}),"\n",(0,i.jsxs)(n.li,{children:["The status of the ",(0,i.jsx)(n.code,{children:"NodeRun"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["A pointer to any related objects (for example, a Task ",(0,i.jsx)(n.code,{children:"NodeRun"})," has a pointer to a ",(0,i.jsx)(n.code,{children:"TaskRun"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["When you click on a ",(0,i.jsx)(n.code,{children:"NodeRun"})," in the dashboard, that information is fetched and displayed on a screen. You can also retrieve information about a ",(0,i.jsx)(n.code,{children:"NodeRun"})," via some ",(0,i.jsx)(n.code,{children:"lhctl"})," commands:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"lhctl list nodeRun <wfRunId>"}),": shows all ",(0,i.jsx)(n.code,{children:"NodeRun"}),"'s from a ",(0,i.jsx)(n.code,{children:"WfRun"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"lhctl get nodeRun <wfRunId> <x> <y>"}),": retrieves the ",(0,i.jsx)(n.code,{children:"y"}),"th ",(0,i.jsx)(n.code,{children:"NodeRun"})," from the ",(0,i.jsx)(n.code,{children:"x"}),"th ",(0,i.jsx)(n.code,{children:"ThreadRun"})," in the specified ",(0,i.jsx)(n.code,{children:"WfRun"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"threading-model",children:"Threading Model"}),"\n",(0,i.jsxs)(n.p,{children:["Just as a ",(0,i.jsx)(n.code,{children:"WfSpec"})," is a blueprint for a ",(0,i.jsx)(n.code,{children:"WfRun"})," (workflow), a ",(0,i.jsx)(n.code,{children:"ThreadSpec"})," is a blueprint for a ",(0,i.jsx)(n.code,{children:"ThreadRun"})," (thread). A ",(0,i.jsx)(n.code,{children:"ThreadSpec"})," is a sub-structure of a ",(0,i.jsx)(n.code,{children:"WfSpec"}),"; a ",(0,i.jsx)(n.code,{children:"ThreadRun"})," is a sub-structure of a ",(0,i.jsx)(n.code,{children:"WfRun"}),", and therefore neither are top-level objects in the LittleHorse API."]}),"\n",(0,i.jsxs)(n.p,{children:["Every workflow has one special thread called the Entrypoint Thread. If you consider a ",(0,i.jsx)(n.code,{children:"WfSpec"})," as a program, then you could say that the Entrypoint ",(0,i.jsx)(n.code,{children:"ThreadSpec"})," is like the ",(0,i.jsx)(n.code,{children:"main()"})," method of the ",(0,i.jsx)(n.code,{children:"WfSpec"}),"/program."]}),"\n",(0,i.jsxs)(n.p,{children:["When a ",(0,i.jsx)(n.code,{children:"WfSpec"})," is run and a ",(0,i.jsx)(n.code,{children:"WfRun"})," is created, the ",(0,i.jsx)(n.code,{children:"WfRun"})," creates an Entrypoint ",(0,i.jsx)(n.code,{children:"ThreadRun"})," which is an instance of the specified Entrypoint ",(0,i.jsx)(n.code,{children:"ThreadSpec"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For many workflows with only one thread (for example, our ",(0,i.jsx)(n.a,{href:"/docs/developer-guide/install#get-started",children:"quickstarts"}),"), the Entrypoint Thread is the only thread in the workflow, and thus it's often simple to think of it as just the entire workflow."]}),"\n",(0,i.jsx)(n.h3,{id:"child-threads",children:"Child Threads"}),"\n",(0,i.jsx)(n.p,{children:"In computer science, the main thread of a program can launch child threads within the same process. Child threads in programming run in the same memory address space and can share certain variables with the parent process."}),"\n",(0,i.jsxs)(n.p,{children:["Similarly, LittleHorse allows you to ",(0,i.jsx)(n.a,{href:"/docs/developer-guide/wfspec-development/child-threads",children:"launch child threads"}),". A child thread results in a new ",(0,i.jsx)(n.code,{children:"ThreadRun"})," being created in the same ",(0,i.jsx)(n.code,{children:"WfRun"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Child Threads have many use-cases. A subset of those are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parallel Execution:"})," A single ",(0,i.jsx)(n.code,{children:"ThreadRun"})," can only execute one ",(0,i.jsx)(n.code,{children:"Node"})," at a time. Child ",(0,i.jsx)(n.code,{children:"ThreadRun"}),"s allow you to execute multiple business process threads at once within a single workflow."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Handling Boundaries:"})," You can attach ",(0,i.jsx)(n.a,{href:"#failure-handling",children:"Failure Handlers"})," to a single ",(0,i.jsx)(n.code,{children:"Node"})," (for example, a ",(0,i.jsx)(n.code,{children:"TaskRun"}),"), or to a whole ",(0,i.jsx)(n.code,{children:"ThreadRun"})," by attaching it to the ",(0,i.jsx)(n.code,{children:"WaitForThreadsNode"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Workflow Decomposition:"})," Using a Thread allows you to decompose your workflow into smaller logical chunks which makes for more understandable code and workflow diagrams."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Repeatable Functionality:"})," Certain workflows may require executing the same business process with multiple inputs. For example, a workflow might require asking three different departments to approve a change. You could use the same ",(0,i.jsx)(n.code,{children:"ThreadSpec"})," with different input variables, each running as a child ",(0,i.jsx)(n.code,{children:"ThreadRun"})," sequentially or in parallel."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"variable-scoping",children:"Variable Scoping"}),"\n",(0,i.jsxs)(n.p,{children:["As described above, a ",(0,i.jsx)(n.code,{children:"Variable"})," is scoped to the ",(0,i.jsx)(n.code,{children:"ThreadRun"})," level. A ",(0,i.jsx)(n.code,{children:"Variable"})," object is created in the LittleHorse API when a ",(0,i.jsx)(n.code,{children:"ThreadRun"})," starts."]}),"\n",(0,i.jsxs)(n.p,{children:["When a child ",(0,i.jsx)(n.code,{children:"ThreadRun"})," of any type is started, it has ",(0,i.jsx)(n.em,{children:"read and write"})," access to its own ",(0,i.jsx)(n.code,{children:"Variable"}),"s, and all ",(0,i.jsx)(n.code,{children:"Variable"}),"s that its parent has access to (including the parent's parent, and so on)."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Since a ",(0,i.jsx)(n.code,{children:"ThreadRun"})," can have multiple children, the parent does ",(0,i.jsx)(n.em,{children:"not"})," have access to the variables of the children."]})}),"\n",(0,i.jsx)(n.h3,{id:"failure-handling",children:"Failure Handling"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.a,{href:"/docs/api#failure",children:(0,i.jsx)(n.code,{children:"Failure"})})," in LittleHorse is like an Exception in programming. It means that A Bad Thing\xae has happened. In a workflow engine like LittleHorse, there are two potential sources of Failure:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"A technical process, such as an external API call, fails."}),"\n",(0,i.jsx)(n.li,{children:"Something goes wrong at the business process level; for example, a credit card has insufficient funds."}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["Exception Handling in LittleHorse is a fully separate concept from ",(0,i.jsxs)(n.a,{href:"https://littlehorse.dev/docs/concepts/tasks#retries-and-taskattempt",children:[(0,i.jsx)(n.code,{children:"TaskRun"})," retries"]}),"."]})}),"\n",(0,i.jsxs)(n.h4,{id:"errors-and-exceptions",children:[(0,i.jsx)(n.code,{children:"ERROR"}),"s and ",(0,i.jsx)(n.code,{children:"EXCEPTION"}),"s"]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"Failure"})," that is a result of a technical problem, such as a variable casting error or a ",(0,i.jsx)(n.code,{children:"TaskRun"})," timeout, is an ",(0,i.jsx)(n.code,{children:"ERROR"})," in LittleHorse. All ",(0,i.jsx)(n.code,{children:"ERROR"}),"s are pre-defined by the LittleHorse System. You can find them at the ",(0,i.jsxs)(n.a,{href:"/docs/api#lherrortype",children:[(0,i.jsx)(n.code,{children:"LHErrorType"})," documentation"]}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["In contrast, a business process-level failure is an ",(0,i.jsx)(n.code,{children:"EXCEPTION"}),". All ",(0,i.jsx)(n.code,{children:"EXCEPTION"}),"s are defined by users of LittleHorse. You must explicitly throw an ",(0,i.jsx)(n.code,{children:"EXCEPTION"})," with a specific ",(0,i.jsx)(n.code,{children:"name"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["By rule LittleHorse uses the following naming conventions for ",(0,i.jsx)(n.code,{children:"ERROR"}),"s and ",(0,i.jsx)(n.code,{children:"EXCEPTION"}),"s:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ERROR"}),"'s are pre-defined in the ",(0,i.jsx)(n.code,{children:"LHErrorType"})," enum and follow ",(0,i.jsx)(n.code,{children:"UPPER_UNDERSCORE_CASE"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXCEPTION"})," names are defined by users and follow ",(0,i.jsx)(n.code,{children:"kebab-case"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["As per the ",(0,i.jsx)(n.a,{href:"/docs/developer-guide/wfspec-development/exception-handling",children:"Exception Handling Developer Guide"}),", you may have different error handling logic for different ",(0,i.jsx)(n.code,{children:"Failure"}),"s. For example, you can catch failures for a specific ",(0,i.jsx)(n.code,{children:"ERROR"}),", any ",(0,i.jsx)(n.code,{children:"ERROR"}),", a specific ",(0,i.jsx)(n.code,{children:"EXCEPTION"}),", any ",(0,i.jsx)(n.code,{children:"EXCEPTION"}),", or any ",(0,i.jsx)(n.code,{children:"Failure"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"interrupts",children:"Interrupts"}),"\n",(0,i.jsxs)(n.p,{children:["There are four types of ",(0,i.jsx)(n.code,{children:"ThreadRun"}),"s in LittleHors:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ENTRYPOINT"})," threads"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"CHILD"})," threads, which are created explicitly via a ",(0,i.jsx)(n.a,{href:"/docs/api#startthreadnode",children:(0,i.jsx)(n.code,{children:"StartThreadNode"})})," or a ",(0,i.jsx)(n.a,{href:"/docs/api#startmultiplethreadsnode",children:(0,i.jsx)(n.code,{children:"StartMultipleThreadsNode"})}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FAILURE_HANDLER"})," threads, described above."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"INTERRUPT"})," threads."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For a description of ",(0,i.jsx)(n.code,{children:"INTERRUPT"})," threads, please check out the ",(0,i.jsx)(n.a,{href:"/docs/concepts/external-events#interrupts",children:"External Event docs"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"lifecycle",children:"Lifecycle"}),"\n",(0,i.jsxs)(n.p,{children:["The status of a ",(0,i.jsx)(n.code,{children:"WfRun"})," is determined by looking at the status of the Entrypoint ",(0,i.jsx)(n.code,{children:"ThreadRun"}),". A ",(0,i.jsx)(n.code,{children:"ThreadRun"}),", and by extension a ",(0,i.jsx)(n.code,{children:"WfRun"}),", can have one of the following statuses, determined by the ",(0,i.jsxs)(n.a,{href:"/docs/api#lhstatus",children:[(0,i.jsx)(n.code,{children:"LHStatus"})," enum"]}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"RUNNING"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"HALTING"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"HALTED"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"ERROR"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"EXCEPTION"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"COMPLETED"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"halting-a-workflow",children:"Halting a Workflow"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"ThreadRun"})," can be halted for any of the following reasons:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If a ",(0,i.jsx)(n.code,{children:"StopWfRun"})," request is received (manual halt by system administrator)."]}),"\n",(0,i.jsxs)(n.li,{children:["When interrupted by an ",(0,i.jsx)(n.code,{children:"ExternalEvent"})," which triggers an Interrupt Handler."]}),"\n",(0,i.jsxs)(n.li,{children:["If the ",(0,i.jsx)(n.code,{children:"ThreadRun"})," is a child thread, and the parent ",(0,i.jsx)(n.code,{children:"ThreadRun"})," is ",(0,i.jsx)(n.code,{children:"HALTED"})," o."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Note that halting a parent ",(0,i.jsx)(n.code,{children:"ThreadRun"})," causes all of the children of that ",(0,i.jsx)(n.code,{children:"ThreadRun"})," to be halted as well."]}),"\n",(0,i.jsxs)(n.p,{children:["When a ",(0,i.jsx)(n.code,{children:"ThreadRun"})," is halted, it first moves to the ",(0,i.jsx)(n.code,{children:"HALTING"})," status until the current ",(0,i.jsx)(n.code,{children:"NodeRun"})," can be halted as well (for example, it's always possible to halt an ",(0,i.jsx)(n.code,{children:"ExternalEventNode"})," but a ",(0,i.jsx)(n.code,{children:"TaskNode"})," can't be halted while there is an in-flight ",(0,i.jsx)(n.code,{children:"TaskAttempt"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["The criteria for halting a ",(0,i.jsx)(n.code,{children:"ThreadRun"})," are as follows:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If the ",(0,i.jsx)(n.code,{children:"ThreadRun"})," has any child threads, all children must be in the ",(0,i.jsx)(n.code,{children:"COMPLETED"}),", ",(0,i.jsx)(n.code,{children:"ERROR"}),", or ",(0,i.jsx)(n.code,{children:"HALTED"})," state.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If this condition is not satisfied, then the runtime will halt all Children."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["There can be no ",(0,i.jsx)(n.code,{children:"TaskRun"}),"s that have been dispatched to a Task Worker but not completed, failed, or timed out. In other words, no in-flight tasks."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If a ",(0,i.jsx)(n.code,{children:"WfRun"})," is waiting at an ",(0,i.jsx)(n.code,{children:"EXTERNAL_EVENT"}),", ",(0,i.jsx)(n.code,{children:"USER_TASK"}),", ",(0,i.jsx)(n.code,{children:"WAIT_FOR_THREADS"}),", or ",(0,i.jsx)(n.code,{children:"SLEEP"})," Node, the second condition is automatically satisfied."]})]})}function t(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>a});var i=s(6540);const r={},d=i.createContext(r);function c(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);